diff --unified --recursive --text a/configure b/configure
--- a/configure	2023-02-27 21:43:45.000000000 +0100
+++ b/configure	2023-09-16 15:29:24.441115658 +0200
@@ -307,6 +307,7 @@
   --enable-lv2             enable LV2 audio filtering [no]
   --disable-lzma           disable lzma [autodetect]
   --enable-decklink        enable Blackmagic DeckLink I/O support [no]
+  --enable-dektec          enable DekTec I/O support [no]
   --enable-mbedtls         enable mbedTLS, needed for https support
                            if openssl, gnutls or libtls is not used [no]
   --enable-mediacodec      enable Android MediaCodec support [no]
@@ -1774,6 +1775,7 @@
 
 EXTERNAL_LIBRARY_NONFREE_LIST="
     decklink
+    dektec
     libfdk_aac
     libtls
 "
@@ -3481,6 +3483,8 @@
 rtsp_muxer_select="rtp_muxer http_protocol rtp_protocol rtpenc_chain"
 sap_demuxer_select="sdp_demuxer"
 sap_muxer_select="rtp_muxer rtp_protocol rtpenc_chain"
+sdi_demuxer_select="wrapped_avframe_decoder"
+sdi_muxer_select="wrapped_avframe_encoder"
 sdp_demuxer_select="rtpdec"
 smoothstreaming_muxer_select="ismv_muxer"
 spdif_demuxer_select="adts_header"
@@ -3522,6 +3526,10 @@
 decklink_outdev_deps="decklink threads"
 decklink_outdev_suggest="libklvanc"
 decklink_outdev_extralibs="-lstdc++"
+dektec_indev_deps="dektec"
+dektec_indev_select="sdi_demuxer udp_protocol"
+dektec_outdev_deps="dektec"
+dektec_outdev_select="sdi_muxer udp_protocol"
 dshow_indev_deps="IBaseFilter"
 dshow_indev_extralibs="-lpsapi -lole32 -lstrmiids -luuid -loleaut32 -lshlwapi"
 fbdev_indev_deps="linux_fb_h"
@@ -6835,6 +6843,22 @@
     esac
 fi
 
+if enabled dektec; then
+    if ! enabled nonfree; then
+        die "ERROR: DekTec is incompatible with (l)gpl"
+    fi
+
+    require_pkg_config CDTAPI CDTAPI "CDTAPI.h" CDTAPI_VERSION
+    if test $target_os = "win64"; then
+        check_lib CDTAPI "CDTAPI.h" CDTAPI_VERSION -lCDTAPI64MT
+    else
+        check_lib CDTAPI "CDTAPI.h" CDTAPI_VERSION -lCDTAPI64
+    fi
+
+    dektec_indev_extralibs="$dektec_indev_extralibs ${CDTAPI_extralibs}"
+    dektec_outdev_extralibs="$dektec_outdev_extralibs ${CDTAPI_extralibs}"
+fi
+
 enabled securetransport &&
     check_func SecIdentityCreate "-Wl,-framework,CoreFoundation -Wl,-framework,Security" &&
     check_lib securetransport "Security/SecureTransport.h Security/Security.h" "SSLCreateContext" "-Wl,-framework,CoreFoundation -Wl,-framework,Security" ||
diff --unified --recursive --text a/doc/indevs.texi b/doc/indevs.texi
--- a/doc/indevs.texi	2023-02-27 21:43:45.000000000 +0100
+++ b/doc/indevs.texi	2023-09-16 15:34:20.196929751 +0200
@@ -476,6 +476,77 @@
 
 @end itemize
 
+@section dektec
+
+Input device for DekTec hardware.
+
+DekTec devices are identified by their serial number and port number
+(e.g. 2178000409:5). If no port is specified, port 1 is used.
+
+@subsection Options
+
+@table @option
+
+@item url[:stream_specifier]
+Specify the URL for a video stream (@var{stream_specifier} is 'v') or audio
+stream (@var{stream_specifier} is 'a').
+
+@item sample_rate
+Specify the audio samplerate. Available values are:
+
+@table @samp
+@item 32000
+32 kHz.
+@item 44100
+44.1 kHz.
+@item 48000
+48 kHz.
+@item 96000
+96 kHz.
+@end table
+
+@item bps
+Specify the audio bit depth per sample. Allowed values are 16 and 24.
+
+@item n_channels
+Specify the number of audio channels. Allowed range is from 1 to 64.
+
+@item sdi_standard
+Force a specific SDI standard. Otherwise the standard will automatically be
+deduced from the video input parameters.
+
+@end table
+
+@subsection Examples
+
+@itemize
+
+@item
+Receive a video stream with a DTA-2110:
+@example
+ffplay -url:v 239.0.0.5:5678 -f dektec -i 211000054
+@end example
+
+@item
+Receive a video and audio stream with a DTA-2110:
+@example
+ffplay -url:v 239.0.0.5:5678 -url:a 239.0.0.5:5680 -f dektec -i 211000054
+@end example
+
+@item
+Receive an audio stream with specific parameters via DTA-2110:
+@example
+ffplay -url:a 239.0.0.5:5680 -sample_rate 48000 -bps 24 -n_channels 2 -f dektec -i 211000054
+@end example
+
+@item
+Receive and render an SDI stream from a DTA-2178:
+@example
+ffplay -f dektec -i 217800024:1
+@end example
+
+@end itemize
+
 @section dshow
 
 Windows DirectShow input device.
diff --unified --recursive --text a/doc/outdevs.texi b/doc/outdevs.texi
--- a/doc/outdevs.texi	2022-11-04 21:16:28.000000000 +0100
+++ b/doc/outdevs.texi	2023-09-16 15:36:34.648679554 +0200
@@ -267,6 +267,88 @@
 
 @end itemize
 
+@section dektec
+
+Output device for DekTec hardware.
+
+DekTec devices are identified by their serial number and port number
+(e.g. 2178000409:5). If no port is specified, port 1 is used.
+
+@subsection Options
+
+@table @option
+
+@item url[:stream_specifier]
+Specify the URL for a video stream (@var{stream_specifier} is 'v') or audio
+stream (@var{stream_specifier} is 'a').
+
+@item aspp
+Set the number of audio samples per RTP packet. Default is 48. Minimum value
+is 1. Maximum value depends on the audio properties. Common values are 6 and 48.
+
+@item pf
+Specify the pixel format. Available values are:
+
+@table @samp
+@item auto
+The default, use the pixel format from the video stream.
+@item 8
+Force 8-bit video output.
+@item 10
+Force 10-bit video output.
+@end table
+
+Automatic pixel format conversion is done to get the right picel format for the
+hardware.
+
+@item pm
+Set the SMPTE-2110 packing mode. Available values are:
+
+@table @samp
+@item block
+@item line
+@item general
+@end table
+
+Default is @option{block}.
+
+@item sch
+Set the SMPTE-2110 scheduling mode. Available values are:
+
+@table @samp
+@item gapped
+@item linear
+@end table
+
+Default is @option{gapped}.
+
+@item ps
+Specify the RTP payload size. Default is -1 and automatically sizes the RTP
+packets. Allowed range is from 1 to 1440.
+
+@item pt
+Specify the RTP payload type. Default is 96. Allowed range is from 96 to 127.
+
+@end table
+
+@subsection Examples
+
+@itemize
+
+@item
+Playout an MPEG transport stream via a DTA-2110 (port 1):
+@example
+ffmpeg -i input.ts -url:v 239.0.0.5:5678  -url:a 239.0.0.6:5680 -f dektec -o 211000054
+@end example
+
+@item
+Playout an MPEG transport stream via a DTA-2178 port 3:
+@example
+ffmpeg -i input.ts -f dektec -o 217800024:3
+@end example
+
+@end itemize
+
 @section fbdev
 
 Linux framebuffer output device.
diff --unified --recursive --text a/fftools/Makefile b/fftools/Makefile
--- a/fftools/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/fftools/Makefile	2023-09-16 15:46:36.996719403 +0200
@@ -19,9 +19,10 @@
     fftools/objpool.o           \
     fftools/sync_queue.o        \
     fftools/thread_queue.o      \
+    fftools/unused_functions.o  \
 
 define DOFFTOOL
-OBJS-$(1) += fftools/cmdutils.o fftools/opt_common.o fftools/$(1).o $(OBJS-$(1)-yes)
+OBJS-$(1) += fftools/cmdutils.o fftools/opt_common.o fftools/unused_functions.o fftools/$(1).o $(OBJS-$(1)-yes)
 ifdef HAVE_GNU_WINDRES
 OBJS-$(1) += fftools/fftoolsres.o
 endif
diff --unified --recursive --text a/libavcodec/Makefile b/libavcodec/Makefile
--- a/libavcodec/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/libavcodec/Makefile	2023-09-16 15:53:29.728370219 +0200
@@ -55,6 +55,7 @@
        profiles.o                                                       \
        qsv_api.o                                                        \
        raw.o                                                            \
+       unused_functions.o                                               \
        utils.o                                                          \
        version.o                                                        \
        vlc.o                                                            \
diff --unified --recursive --text a/libavdevice/alldevices.c b/libavdevice/alldevices.c
--- a/libavdevice/alldevices.c	2023-02-27 21:43:45.000000000 +0100
+++ b/libavdevice/alldevices.c	2023-09-16 17:08:03.406493367 +0200
@@ -32,6 +32,8 @@
 extern const FFOutputFormat ff_caca_muxer;
 extern const AVInputFormat  ff_decklink_demuxer;
 extern const FFOutputFormat ff_decklink_muxer;
+extern const AVInputFormat  ff_dektec_demuxer;
+extern const AVOutputFormat ff_dektec_muxer;
 extern const AVInputFormat  ff_dshow_demuxer;
 extern const AVInputFormat  ff_fbdev_demuxer;
 extern const FFOutputFormat ff_fbdev_muxer;
diff --unified --recursive --text a/libavdevice/Makefile b/libavdevice/Makefile
--- a/libavdevice/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/libavdevice/Makefile	2023-09-16 17:03:28.303193201 +0200
@@ -22,6 +22,8 @@
 OBJS-$(CONFIG_CACA_OUTDEV)               += caca.o
 OBJS-$(CONFIG_DECKLINK_OUTDEV)           += decklink_enc.o decklink_enc_c.o decklink_common.o
 OBJS-$(CONFIG_DECKLINK_INDEV)            += decklink_dec.o decklink_dec_c.o decklink_common.o
+OBJS-$(CONFIG_DEKTEC_INDEV)              += dektec_dec.o dektec_common.o
+OBJS-$(CONFIG_DEKTEC_OUTDEV)             += dektec_enc.o dektec_common.o
 OBJS-$(CONFIG_DSHOW_INDEV)               += dshow_crossbar.o dshow.o dshow_enummediatypes.o \
                                             dshow_enumpins.o dshow_filter.o \
                                             dshow_pin.o dshow_common.o
diff --unified --recursive --text a/libavfilter/allfilters.c b/libavfilter/allfilters.c
--- a/libavfilter/allfilters.c	2023-02-27 21:43:45.000000000 +0100
+++ b/libavfilter/allfilters.c	2023-09-16 17:13:34.761423801 +0200
@@ -554,6 +554,7 @@
 extern const AVFilter ff_vsrc_smptehdbars;
 extern const AVFilter ff_vsrc_testsrc;
 extern const AVFilter ff_vsrc_testsrc2;
+extern const AVFilter ff_vsrc_yuvflag;
 extern const AVFilter ff_vsrc_yuvtestsrc;
 
 extern const AVFilter ff_vsink_nullsink;
diff --unified --recursive --text a/libavfilter/Makefile b/libavfilter/Makefile
--- a/libavfilter/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/libavfilter/Makefile	2023-09-16 17:12:22.176294464 +0200
@@ -21,6 +21,7 @@
        framequeue.o                                                     \
        graphdump.o                                                      \
        graphparser.o                                                    \
+       unused_functions.o                                               \
        version.o                                                        \
        video.o                                                          \
 
diff --unified --recursive --text a/libavfilter/vsrc_testsrc.c b/libavfilter/vsrc_testsrc.c
--- a/libavfilter/vsrc_testsrc.c	2023-02-27 21:43:45.000000000 +0100
+++ b/libavfilter/vsrc_testsrc.c	2023-09-16 17:22:02.580665030 +0200
@@ -88,6 +88,10 @@
 
     /* only used by haldclut */
     int level;
+
+    /* only used by yuvflag and yuvflag2 */
+    int box_x, box_y, box_w, box_h;
+    AVFrame *flag;
 } TestSourceContext;
 
 #define OFFSET(x) offsetof(TestSourceContext, x)
@@ -2039,3 +2043,422 @@
 };
 
 #endif /* CONFIG_COLORCHART_FILTER */
+
+#if CONFIG_YUVFLAG_FILTER
+
+#include <emmintrin.h> // SSE2 intrinsics
+#include <immintrin.h> // Other intrinsics
+
+#include "libavutil/x86/cpu.h"
+
+static const AVOption yuvflag_options[] = {
+    COMMON_OPTIONS
+    { NULL }
+};
+
+AVFILTER_DEFINE_CLASS(yuvflag);
+
+static void yuvflag_fill_picture_8b(AVFilterContext *ctx, AVFrame *frame)
+{
+    TestSourceContext *test = ctx->priv;
+    int x = 0, y = 0;
+    const int linesize = frame->linesize[0];
+    uint8_t *line = frame->data[0];
+    int one_third = test->h / 3;
+    int two_third = one_third * 2;
+
+
+    const uint8_t red_y = 0x51;
+    const uint8_t red_u = 0x59;
+    const uint8_t red_v = 0xF0;
+    const uint32_t red = red_y << 24 | red_v << 16 | red_y << 8 | red_u;
+    const uint8_t white_y = 0xEB;
+    const uint8_t white_u = 0x80;
+    const uint8_t white_v = 0x80;
+    const uint32_t white = white_y << 24 | white_v << 16 | white_y << 8 | white_u;
+    const uint8_t blue_y = 0x29;
+    const uint8_t blue_u = 0xF0;
+    const uint8_t blue_v = 0x6E;
+    const uint32_t blue = blue_y << 24 | blue_v << 16 | blue_y << 8 | blue_u;
+    const uint8_t orange_y = 0x9C;
+    const uint8_t orange_u = 0x2F;
+    const uint8_t orange_v = 0xB9;
+    const uint32_t orange = orange_y << 24 | orange_v << 16 | orange_y << 8 | orange_u;
+
+    for (y = 0; y < one_third; y++) {
+        uint32_t *dst = line;
+        for (int x = 0; x < test->w; x += 2) {
+            *dst++ = red;
+        }
+        line += linesize;
+    }
+    for (; y < two_third; y++) {
+        uint32_t *dst = line;
+        for (int x = 0; x < test->w; x += 2) {
+            *dst++ = white;
+        }
+        line += linesize;
+    }
+    for (; y < test->h; y++) {
+        uint32_t *dst = line;
+        for (int x = 0; x < test->w; x += 2) {
+            *dst++ = blue;
+        }
+        line += linesize;
+    }
+
+    for (int y = test->box_y; y < (test->box_y + test->box_h); y++) {
+        for (int x = test->box_x; x < ((test->box_x + test->box_w) - 1); x += 2) {
+            uint32_t *dst = frame->data[0] + y * linesize + x * 2;
+            *dst++ = orange;
+        }
+    }
+
+    if ((test->box_x + test->box_w + 2) < test->w)
+        test->box_x += 2;
+    else
+        test->box_x = 0;
+
+    if ((test->box_y + test->box_h + 1) < test->h)
+        test->box_y++;
+    else
+        test->box_y = 0;
+}
+
+static void yuvflag_fill_picture_10b(AVFilterContext *ctx, AVFrame *frame)
+{
+    TestSourceContext *test = ctx->priv;
+    int x = 0, y = 0;
+    const int linesize = frame->linesize[0];
+    uint8_t *line = frame->data[0];
+    int one_third = test->h / 3;
+    int two_third = one_third * 2;
+
+    uint16_t *y_line = frame->data[0];
+    uint16_t *u_line = frame->data[1];
+    uint16_t *v_line = frame->data[2];
+    av_log(ctx, AV_LOG_DEBUG, "y=%lld, u=%lld, v=%lld\n", frame->data[0], frame->data[1], frame->data[2]);
+
+    const uint16_t red_y = 0x51 << 2;
+    const uint16_t red_u = 0x59 << 2;
+    const uint16_t red_v = 0xF0 << 2;
+    const uint32_t red = red_y << 24 | red_v << 16 | red_y << 8 | red_u;
+    const uint16_t white_y = 0xEB << 2;
+    const uint16_t white_u = 0x80 << 2;
+    const uint16_t white_v = 0x80 << 2;
+    const uint32_t white = white_y << 24 | white_v << 16 | white_y << 8 | white_u;
+    const uint16_t blue_y = 0x29 << 2;
+    const uint16_t blue_u = 0xF0 << 2;
+    const uint16_t blue_v = 0x6E << 2;
+    const uint32_t blue = blue_y << 24 | blue_v << 16 | blue_y << 8 | blue_u;
+    const uint16_t orange_y = 0x9C << 2;
+    const uint16_t orange_u = 0x2F << 2;
+    const uint16_t orange_v = 0xB9 << 2;
+    const uint32_t orange = orange_y << 24 | orange_v << 16 | orange_y << 8 | orange_u;
+
+    for (y = 0; y < one_third; y++) {
+        for (int x = 0; x < test->w; x += 2) {
+            *y_line++ = red_y;
+            *y_line++ = red_y;
+            *u_line++ = red_u;
+            *v_line++ = red_v;
+        }
+    }
+    for (; y < two_third; y++) {
+        for (int x = 0; x < test->w; x += 2) {
+            *y_line++ = white_y;
+            *y_line++ = white_y;
+            *u_line++ = white_u;
+            *v_line++ = white_v;
+        }
+    }
+    for (; y < test->h; y++) {
+        for (int x = 0; x < test->w; x += 2) {
+            *y_line++ = blue_y;
+            *y_line++ = blue_y;
+            *u_line++ = blue_u;
+            *v_line++ = blue_v;
+        }
+    }
+
+    for (int y = test->box_y; y < (test->box_y + test->box_h); y++) {
+        uint16_t *y_line = frame->data[0] + y * frame->linesize[0];
+        uint16_t *u_line = frame->data[1] + y * frame->linesize[1];
+        uint16_t *v_line = frame->data[2] + y * frame->linesize[2];
+        for (int x = test->box_x; x < ((test->box_x + test->box_w) - 1); x+=2) {
+            y_line[x] = orange_y;
+            y_line[x+1] = orange_y;
+            u_line[x/2] = orange_u;
+            v_line[x/2] = orange_v;
+        }
+    }
+
+    if ((test->box_x + test->box_w + 2) < test->w)
+        test->box_x += 2;
+    else
+        test->box_x = 0;
+
+    if ((test->box_y + test->box_h + 1) < test->h)
+        test->box_y++;
+    else
+        test->box_y = 0;
+}
+
+static void yuvflag_fill_picture_sse_8b(AVFilterContext *ctx, AVFrame *frame)
+{
+    TestSourceContext *test = ctx->priv;
+    int x = 0, y = 0;
+    const int linesize = frame->linesize[0];
+    uint8_t *line = frame->data[0];
+    int one_third = test->h / 3;
+    int two_third = one_third * 2;
+
+
+    const uint8_t red_y = 0x51, red_u = 0x59, red_v = 0xF0;
+    const uint8_t white_y = 0xEB, white_u = 0x80, white_v = 0x80;
+    const uint8_t blue_y = 0x29, blue_u = 0xF0, blue_v = 0x6E;
+    const uint8_t orange_y = 0x9C, orange_u = 0x2F, orange_v = 0xB9;
+
+    __m128i red = _mm_set1_epi32(red_y << 24 | red_v << 16 | red_y << 8 | red_u);
+    __m128i white = _mm_set1_epi32(white_y << 24 | white_v << 16 | white_y << 8 | white_u);
+    __m128i blue = _mm_set1_epi32(blue_y << 24 | blue_v << 16 | blue_y << 8 | blue_u);
+    // __m128i orange = _mm_set1_epi32(orange_y << 24 | orange_v << 16 | orange_y << 8 | orange_u);
+    const uint32_t orange = orange_y << 24 | orange_v << 16 | orange_y << 8 | orange_u;
+
+    for (y = 0; y < one_third; y++) {
+        __m128i *dst = line;
+        for (int x = 0; x < linesize; x += 16) {
+            _mm_stream_si128(dst++, red);
+        }
+        line += linesize;
+    }
+    for (; y < two_third; y++) {
+        __m128i *dst = line;
+        for (int x = 0; x < linesize; x += 16) {
+            _mm_stream_si128(dst++, white);
+        }
+        line += linesize;
+    }
+    for (; y < test->h; y++) {
+        __m128i *dst = line;
+        for (int x = 0; x < linesize; x += 16) {
+            _mm_stream_si128(dst++, blue);
+        }
+        line += linesize;
+    }
+
+    for (int y = test->box_y; y < (test->box_y + test->box_h); y++) {
+        for (int x = test->box_x; x < ((test->box_x + test->box_w) - 1); x += 2) {
+            uint32_t *dst = frame->data[0] + y * linesize + x * 2;
+            *dst++ = orange;
+        }
+    }
+
+    if ((test->box_x + test->box_w + 2) < test->w)
+        test->box_x += 2;
+    else
+        test->box_x = 0;
+
+    if ((test->box_y + test->box_h + 1) < test->h)
+        test->box_y++;
+    else
+        test->box_y = 0;
+}
+
+static void yuvflag_fill_picture_sse_10b(AVFilterContext *ctx, AVFrame *frame)
+{
+    TestSourceContext *test = ctx->priv;
+    int ret = 0;
+    // int x = 0, y = 0;
+    // const int linesize = frame->linesize[0];
+    // uint8_t *line = frame->data[0];
+    // int one_third = test->h / 3;
+    // int two_third = one_third * 2;
+
+    // uint8_t *y_line = frame->data[0];
+    // uint8_t *u_line = frame->data[1];
+    // uint8_t *v_line = frame->data[2];
+
+
+    const uint16_t orange_y = 0x9C << 2;
+    const uint16_t orange_u = 0x2F << 2;
+    const uint16_t orange_v = 0xB9 << 2;
+    // const uint32_t orange = orange_y << 24 | orange_v << 16 | orange_y << 8 | orange_u;
+
+    // const uint8_t red_y = 0x51, red_u = 0x59, red_v = 0xF0;
+    // const uint8_t white_y = 0xEB, white_u = 0x80, white_v = 0x80;
+    // const uint8_t blue_y = 0x29, blue_u = 0xF0, blue_v = 0x6E;
+    // const uint8_t orange_y = 0x9C, orange_u = 0x2F, orange_v = 0xB9;
+
+    // __m128i red = _mm_set1_epi32(red_y << 24 | red_v << 16 | red_y << 8 | red_u);
+    // __m128i white = _mm_set1_epi32(white_y << 24 | white_v << 16 | white_y << 8 | white_u);
+    // __m128i blue = _mm_set1_epi32(blue_y << 24 | blue_v << 16 | blue_y << 8 | blue_u);
+    // // __m128i orange = _mm_set1_epi32(orange_y << 24 | orange_v << 16 | orange_y << 8 | orange_u);
+    // const uint32_t orange = orange_y << 24 | orange_v << 16 | orange_y << 8 | orange_u;
+
+    ret = av_frame_copy(frame, test->flag);
+    if (ret < 0)
+        return;
+
+    for (int y = test->box_y; y < (test->box_y + test->box_h); y++) {
+        uint16_t *y_line = frame->data[0] + y * frame->linesize[0];
+        uint16_t *u_line = frame->data[1] + y * frame->linesize[1];
+        uint16_t *v_line = frame->data[2] + y * frame->linesize[2];
+        for (int x = test->box_x; x < ((test->box_x + test->box_w) - 1); x+=2) {
+            y_line[x] = orange_y;
+            y_line[x+1] = orange_y;
+            u_line[x/2] = orange_u;
+            v_line[x/2] = orange_v;
+        }
+    }
+
+    if ((test->box_x + test->box_w + 2) < test->w)
+        test->box_x += 2;
+    else
+        test->box_x = 0;
+
+    if ((test->box_y + test->box_h + 1) < test->h)
+        test->box_y++;
+    else
+        test->box_y = 0;
+}
+
+static int yuvflag_config_props(AVFilterLink *outlink)
+{
+    TestSourceContext *test = outlink->src->priv;
+    int cpu_flags = 0;
+    int ret = 0;
+
+    test->box_x = test->w / 2;
+    test->box_y = test->h / 2;
+    test->box_w = test->w / 10;
+    test->box_h = test->box_w;
+
+    cpu_flags = av_get_cpu_flags();
+    if (X86_SSE2(cpu_flags)) {
+        if (outlink->format == AV_PIX_FMT_UYVY422)
+            test->fill_picture_fn = yuvflag_fill_picture_sse_8b;
+        else if (outlink->format == AV_PIX_FMT_YUV422P10LE)
+            test->fill_picture_fn = yuvflag_fill_picture_sse_10b;
+    } else {
+        if (outlink->format == AV_PIX_FMT_UYVY422)
+            test->fill_picture_fn = yuvflag_fill_picture_8b;
+        else if (outlink->format == AV_PIX_FMT_YUV422P10LE)
+            test->fill_picture_fn = yuvflag_fill_picture_10b;
+    }
+
+    test->flag = av_frame_alloc();
+    test->flag->format = AV_PIX_FMT_YUV422P10LE;
+    test->flag->width = test->w;
+    test->flag->height = test->h;
+    ret = av_frame_get_buffer(test->flag, 0);
+    if (ret != 0)
+        return ret;
+
+    const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(test->flag->format);
+
+    const uint16_t red_y = 0x51 << 2;
+    const uint16_t red_u = 0x59 << 2;
+    const uint16_t red_v = 0xF0 << 2;
+    const uint32_t red = red_y << 24 | red_v << 16 | red_y << 8 | red_u;
+    const uint16_t white_y = 0xEB << 2;
+    const uint16_t white_u = 0x80 << 2;
+    const uint16_t white_v = 0x80 << 2;
+    const uint32_t white = white_y << 24 | white_v << 16 | white_y << 8 | white_u;
+    const uint16_t blue_y = 0x29 << 2;
+    const uint16_t blue_u = 0xF0 << 2;
+    const uint16_t blue_v = 0x6E << 2;
+    const uint32_t blue = blue_y << 24 | blue_v << 16 | blue_y << 8 | blue_u;
+
+    uint8_t *y_line = test->flag->data[0];
+    uint8_t *u_line = test->flag->data[1];
+    uint8_t *v_line = test->flag->data[2];
+
+    int one_third;
+    int two_third;
+    int width = test->flag->width;
+    int height = test->flag->height;
+    int chroma_width = AV_CEIL_RSHIFT(width, desc->log2_chroma_w);
+    int chroma_height= AV_CEIL_RSHIFT(height, desc->log2_chroma_h);
+
+    one_third = height / 3;
+    two_third = one_third * 2;
+    for (int y = 0; y < height; y++) {
+        __m128i *dst_y = y_line;
+
+        if (y < one_third) {
+            for (int x = 0; x < width; x += 8)
+                _mm_store_si128(dst_y++, _mm_set1_epi16(red_y));
+        }
+        else if (y < two_third) {
+            for (int x = 0; x < width; x += 8)
+                _mm_store_si128(dst_y++, _mm_set1_epi16(white_y));
+        }
+        else {
+            for (int x = 0; x < width; x += 8)
+                _mm_store_si128(dst_y++, _mm_set1_epi16(blue_y));
+        }
+
+        y_line += test->flag->linesize[0];
+    }
+
+    one_third = chroma_height / 3;
+    two_third = one_third * 2;
+    for (int y = 0; y < chroma_height; y++) {
+        __m128i *dst_u = u_line;
+        __m128i *dst_v = v_line;
+
+        if (y < one_third) {
+            for (int x = 0; x < chroma_width; x += 8) {
+                _mm_store_si128(dst_u++, _mm_set1_epi16(red_u));
+                _mm_store_si128(dst_v++, _mm_set1_epi16(red_v));
+            }
+        }
+        else if (y < two_third) {
+            for (int x = 0; x < chroma_width; x += 8) {
+                _mm_store_si128(dst_u++, _mm_set1_epi16(white_u));
+                _mm_store_si128(dst_v++, _mm_set1_epi16(white_v));
+            }
+        }
+        else {
+            for (int x = 0; x < chroma_width; x += 8) {
+                _mm_store_si128(dst_u++, _mm_set1_epi16(blue_u));
+                _mm_store_si128(dst_v++, _mm_set1_epi16(blue_v));
+            }
+        }
+
+        u_line += test->flag->linesize[1];
+        v_line += test->flag->linesize[2];
+    }
+
+    return config_props(outlink);
+}
+
+static const enum AVPixelFormat yuvflag_pix_fmts[] = {
+    AV_PIX_FMT_UYVY422,
+    AV_PIX_FMT_YUV422P10LE,
+    AV_PIX_FMT_NONE
+};
+
+static const AVFilterPad avfilter_vsrc_yuvflag_outputs[] = {
+    {
+        .name          = "default",
+        .type          = AVMEDIA_TYPE_VIDEO,
+        .config_props  = yuvflag_config_props,
+    },
+};
+
+const AVFilter ff_vsrc_yuvflag = {
+    .name          = "yuvflag",
+    .description   = NULL_IF_CONFIG_SMALL("Generate YUV flag."),
+    .priv_size     = sizeof(TestSourceContext),
+    .priv_class    = &yuvflag_class,
+    .init          = init,
+    .uninit        = uninit,
+    .activate      = activate,
+    .inputs        = NULL,
+    FILTER_OUTPUTS(avfilter_vsrc_yuvflag_outputs),
+    FILTER_PIXFMTS_ARRAY(yuvflag_pix_fmts),
+};
+
+#endif /* CONFIG_YUVFLAG_FILTER */
diff --unified --recursive --text a/libavformat/allformats.c b/libavformat/allformats.c
--- a/libavformat/allformats.c	2023-02-27 21:43:45.000000000 +0100
+++ b/libavformat/allformats.c	2023-09-16 17:25:41.949686067 +0200
@@ -512,6 +512,8 @@
 extern const AVInputFormat  ff_yop_demuxer;
 extern const AVInputFormat  ff_yuv4mpegpipe_demuxer;
 extern const FFOutputFormat ff_yuv4mpegpipe_muxer;
+extern const AVInputFormat  ff_sdi_demuxer;
+extern const AVOutputFormat ff_sdi_muxer;
 /* image demuxers */
 extern const AVInputFormat  ff_image_bmp_pipe_demuxer;
 extern const AVInputFormat  ff_image_cri_pipe_demuxer;
diff --unified --recursive --text a/libavformat/Makefile b/libavformat/Makefile
--- a/libavformat/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/libavformat/Makefile	2023-09-16 17:24:03.158616736 +0200
@@ -27,6 +27,7 @@
        riff.o               \
        sdp.o                \
        seek.o               \
+       unused_functions.o   \
        url.o                \
        utils.o              \
        version.o            \
@@ -524,6 +525,10 @@
 OBJS-$(CONFIG_SCC_DEMUXER)               += sccdec.o subtitles.o
 OBJS-$(CONFIG_SCC_MUXER)                 += sccenc.o
 OBJS-$(CONFIG_SCD_DEMUXER)               += scd.o
+OBJS-$(CONFIG_SDI_DEMUXER)               += sdidec.o sdicommon.o
+OBJS-$(CONFIG_SDI_MUXER)                 += sdienc.o sdicommon.o \
+                                            sdienc_audio.o \
+                                            sdienc_payloadid.o
 OBJS-$(CONFIG_SDNS_DEMUXER)              += sdns.o
 OBJS-$(CONFIG_SDP_DEMUXER)               += rtsp.o
 OBJS-$(CONFIG_SDR2_DEMUXER)              += sdr2.o
diff --unified --recursive --text a/libavutil/Makefile b/libavutil/Makefile
--- a/libavutil/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/libavutil/Makefile	2023-09-16 17:31:15.049091139 +0200
@@ -170,6 +170,7 @@
        timecode.o                                                       \
        tree.o                                                           \
        twofish.o                                                        \
+       unused_functions.o                                               \
        utils.o                                                          \
        xga_font_data.o                                                  \
        xtea.o                                                           \
diff --unified --recursive --text a/libswresample/Makefile b/libswresample/Makefile
--- a/libswresample/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/libswresample/Makefile	2023-09-16 17:32:12.457392311 +0200
@@ -14,6 +14,7 @@
        resample_dsp.o                        \
        swresample.o                          \
        swresample_frame.o                    \
+       unused_functions.o                    \
        version.o                             \
 
 OBJS-$(CONFIG_LIBSOXR) += soxr_resample.o
diff --unified --recursive --text a/libswscale/Makefile b/libswscale/Makefile
--- a/libswscale/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/libswscale/Makefile	2023-09-16 17:33:17.400414958 +0200
@@ -17,6 +17,7 @@
        slice.o                                          \
        swscale.o                                        \
        swscale_unscaled.o                               \
+       unused_functions.o                               \
        utils.o                                          \
        version.o                                        \
        yuv2rgb.o                                        \
diff --unified --recursive --text a/tests/Makefile b/tests/Makefile
--- a/tests/Makefile	2023-02-27 21:43:45.000000000 +0100
+++ b/tests/Makefile	2023-09-16 17:34:25.951512552 +0200
@@ -229,6 +229,7 @@
 include $(SRC_PATH)/tests/fate/qtrle.mak
 include $(SRC_PATH)/tests/fate/real.mak
 include $(SRC_PATH)/tests/fate/screen.mak
+include $(SRC_PATH)/tests/fate/sdi.mak
 include $(SRC_PATH)/tests/fate/segafilm.mak
 include $(SRC_PATH)/tests/fate/segment.mak
 include $(SRC_PATH)/tests/fate/source.mak
