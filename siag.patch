diff -ur siag-3.6.1/egon/fileio_html.c siag-3.6.1-b/egon/fileio_html.c
--- siag-3.6.1/egon/fileio_html.c	2003-01-16 00:56:43.000000000 +0100
+++ siag-3.6.1-b/egon/fileio_html.c	2023-06-05 12:22:51.497631403 +0200
@@ -39,7 +39,7 @@
 	if (!line) return;
 	while ((c = *line)) {
 		MwToCchar(b, c);
-		fprintf(fp, b);
+		fprintf(fp, "%s", b);
 		line++;
 	}
 }
diff -ur siag-3.6.1/pw/fileio_html.c siag-3.6.1-b/pw/fileio_html.c
--- siag-3.6.1/pw/fileio_html.c	2003-01-16 00:56:29.000000000 +0100
+++ siag-3.6.1-b/pw/fileio_html.c	2023-06-05 12:18:21.641651536 +0200
@@ -39,7 +39,7 @@
 	if (!line) return;
 	while ((c = line->c)) {
 		MwToCchar(b, c);
-		fprintf(fp, b);
+		fprintf(fp, "%s", b);
 		line++;
 	}
 }
diff -ur siag-3.6.1/tsiag/window.c siag-3.6.1-b/tsiag/window.c
--- siag-3.6.1/tsiag/window.c	2003-01-16 00:56:24.000000000 +0100
+++ siag-3.6.1-b/tsiag/window.c	2023-06-05 12:18:09.842002737 +0200
@@ -98,7 +98,7 @@
 
 int columns;    /* number of cells per line */
 int width;      /* default cell width */
-int left_margin;
+int l_margin;
 /*int right_margin = 5;*/
 
 float zoom = 1.0;	/* unused */
@@ -126,7 +126,7 @@
 			for (j = 0; j < screen_size.col; j++) {
 				ret_pvalue(s, buffer_of_window(w), w->sht, data_start.row + i, data_start.col + j, -1);
 				if (s[0] == '\0') {
-					wmove(stdscr, 1 + screen_start.row + i, left_margin + (screen_start.col + j) * width);
+					wmove(stdscr, 1 + screen_start.row + i, l_margin + (screen_start.col + j) * width);
 					waddch(stdscr, S9);
 				}
 			}
@@ -139,29 +139,29 @@
 			MwDecodeFormat(ret_format(buffer_of_window(w), w->sht, data_start.row + i, data_start.col + j), ~0, &fmt);
 
 			if (fmt.borders & MW_BORDER_RIGHT) {
-				wmove(stdscr, 1 + screen_start.row + i, left_margin + (screen_start.col + j + 1) * width - 1);
+				wmove(stdscr, 1 + screen_start.row + i, l_margin + (screen_start.col + j + 1) * width - 1);
 				waddch(stdscr, VLINE);
 			}
 			if (fmt.borders & MW_BORDER_LEFT) {
-				wmove(stdscr, 1 + screen_start.row + i, left_margin + (screen_start.col + j) * width - 1);
+				wmove(stdscr, 1 + screen_start.row + i, l_margin + (screen_start.col + j) * width - 1);
 				waddch(stdscr, VLINE);
 			}
 			if (fmt.borders & MW_BORDER_TOP) {
 				int k;
-				wmove(stdscr, 1 + screen_start.row + i, 1 + left_margin + (screen_start.col + j) * width);
+				wmove(stdscr, 1 + screen_start.row + i, 1 + l_margin + (screen_start.col + j) * width);
 				for (k = 0; k < width - (fmt.borders & MW_BORDER_RIGHT ? 2 : 1); k++)
 					waddch(stdscr, S1);
 			}
 			if (fmt.borders & MW_BORDER_BOTTOM) {
 				int k;
-				wmove(stdscr, 1 + screen_start.row + i, 1 + left_margin + (screen_start.col + j) * width);
+				wmove(stdscr, 1 + screen_start.row + i, 1 + l_margin + (screen_start.col + j) * width);
 				for (k = 0; k < width - (fmt.borders & MW_BORDER_RIGHT ? 2 : 1); k++)
 					waddch(stdscr, S9);
 			}
 
 			ret_pvalue(s, buffer_of_window(w), w->sht, data_start.row + i, data_start.col + j, -1);
 			if (s[0] != '\0') {
-				wmove(stdscr, 1 + screen_start.row + i, left_margin + (screen_start.col + j) * width);
+				wmove(stdscr, 1 + screen_start.row + i, l_margin + (screen_start.col + j) * width);
 				if (inblock(w, add_position(data_start, make_position(i, j))))
 					wstandout(stdscr);
 				else
@@ -176,7 +176,7 @@
 				else
 					wattroff(stdscr, A_DIM);
 #endif
-				waddnstr(stdscr, s, size.ws_col - (left_margin + (screen_start.col + j) * width));
+				waddnstr(stdscr, s, size.ws_col - (l_margin + (screen_start.col + j) * width));
 				wstandend(stdscr);
 			}
 		}
@@ -201,10 +201,10 @@
 	wstandout(stdscr);
 	for (i = 0; i < size.ws_row - 3; i++) {
 		wmove(stdscr, 1 + i, 0);
-		wprintw(stdscr, "%-*d", left_margin - 1, get_top(w).row - get_prot(w).row + i + P_MIN.row);
+		wprintw(stdscr, "%-*d", l_margin - 1, get_top(w).row - get_prot(w).row + i + P_MIN.row);
 	}
 	for (i = 0; i < columns; i++) {
-		wmove(stdscr, 0, left_margin + width * i);
+		wmove(stdscr, 0, l_margin + width * i);
 		wprintw(stdscr, "%-*s", width - 1,
 			colnum_text(w->buf, get_top(w).col - get_prot(w).col + i + P_MIN.col));
 	}
@@ -390,7 +390,7 @@
 {
 	MW_TRACE((f, "edit_cell"));
 
-	wmove(stdscr, 1 - P_MIN.row + get_point(w_list).row - get_top(w_list).row + get_prot(w_list).row, left_margin + width * (get_point(w_list).col - get_top(w_list).col - P_MIN.col + get_prot(w_list).col) - 1);
+	wmove(stdscr, 1 - P_MIN.row + get_point(w_list).row - get_top(w_list).row + get_prot(w_list).row, l_margin + width * (get_point(w_list).col - get_top(w_list).col - P_MIN.col + get_prot(w_list).col) - 1);
 	waddch(stdscr, RARROW);
 
 	/* Make show_cur() redraw the contents */
@@ -599,8 +599,8 @@
 		die("The screen is too small");
 
 	width = 8;
-	left_margin = 8;
-	columns = (size.ws_col - left_margin) / width;
+	l_margin = 8;
+	columns = (size.ws_col - l_margin) / width;
 
 	pr_scr_flag = TRUE;
 	show_cur(w_list);
@@ -835,7 +835,7 @@
 	wstandend(stdscr);
 
 	/* finally, the cursor */
-	wmove(stdscr, 1 - P_MIN.row + get_point(w).row - get_top(w).row + get_prot(w).row, left_margin + width * (get_point(w).col - get_top(w).col - P_MIN.col + get_prot(w).col));
+	wmove(stdscr, 1 - P_MIN.row + get_point(w).row - get_top(w).row + get_prot(w).row, l_margin + width * (get_point(w).col - get_top(w).col - P_MIN.col + get_prot(w).col));
 
 	wrefresh(stdscr);
 } /* show_cur */
