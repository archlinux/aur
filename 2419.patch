From 22179e6ee19dd84a0b6e7b70204ba5291b6390b3 Mon Sep 17 00:00:00 2001
From: Fatih Uzunoglu <fuzun54@outlook.com>
Date: Mon, 22 Aug 2022 21:41:40 +0300
Subject: [PATCH 1/2] qt: platform supported composition integration

---
 modules/gui/qt/Makefile.am                    |   3 +
 modules/gui/qt/maininterface/compositor.hpp   |   3 +-
 .../qt/maininterface/compositor_platform.cpp  | 285 ++++++++++++++++++
 .../qt/maininterface/compositor_platform.hpp  |  75 +++++
 4 files changed, 365 insertions(+), 1 deletion(-)
 create mode 100644 modules/gui/qt/maininterface/compositor_platform.cpp
 create mode 100644 modules/gui/qt/maininterface/compositor_platform.hpp

diff --git a/modules/gui/qt/Makefile.am b/modules/gui/qt/Makefile.am
index f8250ed6186..6d82837b024 100644
--- a/modules/gui/qt/Makefile.am
+++ b/modules/gui/qt/Makefile.am
@@ -138,6 +138,8 @@ libqt_plugin_la_SOURCES = \
 	gui/qt/maininterface/compositor.cpp \
 	gui/qt/maininterface/compositor_dummy.hpp \
 	gui/qt/maininterface/compositor_dummy.cpp \
+	gui/qt/maininterface/compositor_platform.hpp \
+	gui/qt/maininterface/compositor_platform.cpp \
 	gui/qt/maininterface/interface_window_handler.cpp \
 	gui/qt/maininterface/interface_window_handler.hpp \
 	gui/qt/maininterface/mainctx.cpp \
@@ -396,6 +398,7 @@ nodist_libqt_plugin_la_SOURCES = \
 	gui/qt/dialogs/playlists/playlists.moc.cpp \
 	gui/qt/maininterface/compositor.moc.cpp \
 	gui/qt/maininterface/compositor_dummy.moc.cpp \
+	gui/qt/maininterface/compositor_platform.moc.cpp \
 	gui/qt/maininterface/interface_window_handler.moc.cpp \
 	gui/qt/maininterface/mainctx.moc.cpp \
 	gui/qt/maininterface/mainui.moc.cpp \
diff --git a/modules/gui/qt/maininterface/compositor.hpp b/modules/gui/qt/maininterface/compositor.hpp
index 1b248cd3f6b..f80118e40f0 100644
--- a/modules/gui/qt/maininterface/compositor.hpp
+++ b/modules/gui/qt/maininterface/compositor.hpp
@@ -53,7 +53,8 @@ public:
         DummyCompositor,
         Win7Compositor,
         DirectCompositionCompositor,
-        X11Compositor
+        X11Compositor,
+        PlatformCompositor
     };
 
     typedef void (*VoutDestroyCb)(vlc_window_t *p_wnd);
diff --git a/modules/gui/qt/maininterface/compositor_platform.cpp b/modules/gui/qt/maininterface/compositor_platform.cpp
new file mode 100644
index 00000000000..ea88b242d71
--- /dev/null
+++ b/modules/gui/qt/maininterface/compositor_platform.cpp
@@ -0,0 +1,285 @@
+/*****************************************************************************
+ * Copyright (C) 2022 VLC authors and VideoLAN
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include "compositor_platform.hpp"
+
+#include "maininterface/mainctx.hpp"
+#include "maininterface/mainui.hpp"
+#include "maininterface/interface_window_handler.hpp"
+#include "maininterface/videosurface.hpp"
+
+#if QT5_HAS_WAYLAND
+#include QPNI_HEADER
+#endif
+
+#define QT_QPA_XCB_TRANSPARENT_CHILD_WINDOW_SUPPORT false
+
+namespace vlc {
+
+class ParentWindow : public QQuickWindow
+{
+public:
+    QObject *focusObject() const override
+    {
+        if (m_innerView)
+            return m_innerView->focusObject();
+        else
+            return nullptr;
+    }
+
+    void keyPressEvent(QKeyEvent * const ev) override
+    {
+        if (m_innerView)
+            QApplication::sendEvent(m_innerView, ev);
+    }
+
+    void keyReleaseEvent(QKeyEvent * const ev) override
+    {
+        if (m_innerView)
+            QApplication::sendEvent(m_innerView, ev);
+    }
+
+    void focusInEvent(QFocusEvent * const) override
+    {
+        // QWindow::requestActivate is not supported on Wayland
+        // We have to manually set the focus.
+        if (m_lastFocusItem)
+            m_lastFocusItem->forceActiveFocus(Qt::TabFocusReason);
+        else if (m_innerView)
+            m_innerView->rootObject()->forceActiveFocus(Qt::TabFocusReason);
+    }
+
+    void focusOutEvent(QFocusEvent * const) override
+    {
+        if (m_innerView)
+            m_lastFocusItem = m_innerView->activeFocusItem();
+    }
+
+#if QT_CONFIG(accessibility)
+    QAccessibleInterface *accessibleRoot() const override
+    {
+        if (m_innerView)
+            return m_innerView->accessibleRoot();
+        else
+            return nullptr;
+    }
+#endif
+
+    void setInnerView(QQuickView* const view)
+    {
+        m_lastFocusItem.clear();
+        m_innerView = view;
+    }
+
+private:
+    QPointer<QQuickView> m_innerView;
+    QPointer<QQuickItem> m_lastFocusItem;
+};
+
+CompositorPlatform::CompositorPlatform(qt_intf_t * const p_intf, QObject * const parent)
+    : CompositorVideo(p_intf, parent) { }
+
+bool CompositorPlatform::platformSupportsChildWindowWithAlpha()
+{
+    const auto& platformName = QApplication::platformName();
+
+    if (platformName == QLatin1String("wayland"))
+        return true;
+    else if (platformName == QLatin1String("xcb"))
+        return QT_QPA_XCB_TRANSPARENT_CHILD_WINDOW_SUPPORT;
+    else if (platformName == QLatin1String("windows"))
+        return true; // TODO: Not tested
+    else if (platformName == QLatin1String("cocoa"))
+        return true; // TODO: Not tested
+
+    return false;
+}
+
+bool CompositorPlatform::init()
+{
+    if (platformSupportsChildWindowWithAlpha())
+        return true;
+    else
+        return false;
+}
+
+bool vlc::CompositorPlatform::makeMainInterface(MainCtx * const mainCtx)
+{
+    m_mainCtx = mainCtx;
+
+    m_parentWindow = std::make_unique<ParentWindow>();
+    m_parentWindow->setObjectName(QStringLiteral("Parent Top-Level Window"));
+    m_parentWindow->setColor(Qt::black);
+
+    m_videoWindow = new QWindow(m_parentWindow.get());
+    m_videoWindow->setObjectName(QStringLiteral("Video Window"));
+
+    m_quickView = new QQuickView(m_parentWindow.get());
+    m_quickView->setObjectName(QStringLiteral("Quick View"));
+    m_quickView->setResizeMode(QQuickView::SizeRootObjectToView);
+    m_quickView->setColor(Qt::transparent);
+    {
+        // Could use QQuickWindow::setDefaultAlphaBuffer(true)
+        // but, we don't need alpha buffer in the parent window.
+        QSurfaceFormat format = m_quickView->format();
+        format.setAlphaBufferSize(8);
+        m_quickView->setFormat(format);
+    }
+
+    static_cast<ParentWindow*>(m_parentWindow.get())->setInnerView(m_quickView);
+
+    // Make sure the Quick View to cover all of the parent window:
+    connect(m_parentWindow.get(), &QWindow::widthChanged, m_quickView, &QWindow::setWidth);
+    connect(m_parentWindow.get(), &QWindow::heightChanged, m_quickView, &QWindow::setHeight);
+
+    Flags flags;
+    if (m_quickView->sceneGraphBackend() != QLatin1String("software"))
+    {
+        // It might be possible to achieve PIP on software backend,
+        // but it is a TO-DO for now.
+        flags |= Flag::CAN_SHOW_PIP;
+    }
+
+    connect(m_quickView, &QQuickWindow::sceneGraphInitialized, m_quickView, [this]() {
+        m_quickView->rootObject()->forceActiveFocus();
+        m_parentWindow->update();
+    });
+
+    commonGUICreate(m_parentWindow.get(), nullptr, m_quickView, flags);
+
+    // Synchronize parent window size with video surface:
+    connect(m_videoSurfaceProvider.get(),
+            &VideoSurfaceProvider::surfaceSizeChanged,
+            this,
+            &CompositorPlatform::onSurfaceSizeChanged,
+            Qt::UniqueConnection);
+
+    m_parentWindow->show();
+    m_videoWindow->show();
+    m_quickView->show();
+
+    return true;
+}
+
+void CompositorPlatform::onSurfacePositionChanged(const QPointF &pos)
+{
+    m_videoWindow->setPosition(pos.toPoint());
+    m_parentWindow->update();
+}
+
+void CompositorPlatform::onSurfaceSizeChanged(const QSizeF &size)
+{
+    m_videoWindow->resize(size.toSize());
+
+    const QSize& a = m_parentWindow->size();
+    const QSize& b = m_videoWindow->size();
+    if (a.width() < b.width() || a.height() < b.height())
+        m_parentWindow->resize(size.toSize());
+
+    m_parentWindow->update();
+}
+
+void CompositorPlatform::destroyMainInterface()
+{
+    unloadGUI();
+}
+
+void CompositorPlatform::unloadGUI()
+{
+    m_interfaceWindowHandler.reset();
+    m_parentWindow.reset();
+}
+
+bool CompositorPlatform::setupVoutWindow(vlc_window_t *p_wnd, VoutDestroyCb destroyCb)
+{
+    assert(m_videoWindow);
+
+    const auto& platformName = QApplication::platformName();
+    if (platformName == QLatin1String("wayland"))
+    {
+#if QT5_HAS_WAYLAND
+        p_wnd->type = VLC_WINDOW_TYPE_WAYLAND;
+
+        // QTBUG-93103
+        QPlatformNativeInterface * const & nativeInterface = QApplication::platformNativeInterface();
+        struct wl_surface *surface = static_cast<struct wl_surface*>(nativeInterface->nativeResourceForWindow(QByteArrayLiteral("surface"), m_videoWindow));
+        p_wnd->handle.wl = surface;
+        struct wl_display *display = static_cast<struct wl_display*>(nativeInterface->nativeResourceForWindow(QByteArrayLiteral("display"), m_videoWindow));
+        p_wnd->display.wl = display;
+#else
+        msg_Warn(m_intf, "Used Qt platform plugin is wayland, but the application is lacking wayland support.");
+        return false;
+#endif
+    }
+    else if (platformName == QLatin1String("windows"))
+    {
+        p_wnd->type = VLC_WINDOW_TYPE_HWND;
+        p_wnd->handle.hwnd = reinterpret_cast<void*>(m_videoWindow->winId());
+    }
+    else if (platformName == QLatin1String("xcb"))
+    {
+        p_wnd->type = VLC_WINDOW_TYPE_XID;
+        p_wnd->handle.xid = m_videoWindow->winId();
+    }
+    else if (platformName == QLatin1String("cocoa"))
+    {
+        p_wnd->type = VLC_WINDOW_TYPE_NSOBJECT;
+        p_wnd->handle.nsobject = reinterpret_cast<void*>(m_videoWindow->winId());
+    }
+    else
+    {
+        return false;
+    }
+
+    commonSetupVoutWindow(p_wnd, destroyCb);
+    return true;
+}
+
+QWindow *CompositorPlatform::interfaceMainWindow() const
+{
+    return m_quickView;
+}
+
+Compositor::Type CompositorPlatform::type() const
+{
+    return Type::PlatformCompositor;
+}
+
+QQuickItem *CompositorPlatform::activeFocusItem() const
+{
+    return m_quickView->activeFocusItem();
+}
+
+int CompositorPlatform::windowEnable(const vlc_window_cfg_t *)
+{
+    commonWindowEnable();
+    return VLC_SUCCESS;
+}
+
+void CompositorPlatform::windowDisable()
+{
+    commonWindowDisable();
+}
+
+void CompositorPlatform::windowDestroy()
+{
+    m_videoWindow->destroy();
+    CompositorVideo::windowDestroy();
+}
+
+}
diff --git a/modules/gui/qt/maininterface/compositor_platform.hpp b/modules/gui/qt/maininterface/compositor_platform.hpp
new file mode 100644
index 00000000000..fcbd8f40126
--- /dev/null
+++ b/modules/gui/qt/maininterface/compositor_platform.hpp
@@ -0,0 +1,75 @@
+/*****************************************************************************
+ * Copyright (C) 2022 VLC authors and VideoLAN
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+#ifndef COMPOSITOR_PLATFORM_HPP
+#define COMPOSITOR_PLATFORM_HPP
+
+#include "compositor.hpp"
+
+#include <QWindow>
+#include <QQuickView>
+#include <QPointer>
+
+#include <memory>
+
+class MainCtx;
+
+namespace vlc {
+
+class CompositorPlatform : public CompositorVideo
+{
+    Q_OBJECT
+
+public:
+    explicit CompositorPlatform(qt_intf_t * const p_intf, QObject * const parent = nullptr);
+
+    static bool platformSupportsChildWindowWithAlpha();
+
+    static bool preInit(qt_intf_t *) { return true; }
+
+    bool init() override;
+
+    bool makeMainInterface(MainCtx *) override;
+
+    void onSurfacePositionChanged(const QPointF& pos) override;
+    void onSurfaceSizeChanged(const QSizeF& size) override;
+
+    void destroyMainInterface() override;
+
+    void unloadGUI() override;
+
+    bool setupVoutWindow(vlc_window_t *p_wnd, VoutDestroyCb destroyCb) override;
+
+    QWindow* interfaceMainWindow() const override;
+
+    Type type() const override;
+
+    QQuickItem * activeFocusItem() const override;
+
+    int windowEnable(const vlc_window_cfg_t *) override;
+    void windowDisable() override;
+    void windowDestroy() override;
+
+protected:
+    std::unique_ptr<QQuickWindow> m_parentWindow;
+    QPointer<QWindow> m_videoWindow;
+    QPointer<QQuickView> m_quickView;
+};
+
+}
+
+#endif
-- 
GitLab


From a2cd6d32c15c95b7f8d1414cc80bc0b792de4da1 Mon Sep 17 00:00:00 2001
From: Fatih Uzunoglu <fuzun54@outlook.com>
Date: Mon, 22 Aug 2022 21:42:39 +0300
Subject: [PATCH 2/2] qt: register platform compositor integration

---
 modules/gui/qt/maininterface/compositor.cpp | 2 ++
 modules/gui/qt/qt.cpp                       | 2 ++
 2 files changed, 4 insertions(+)

diff --git a/modules/gui/qt/maininterface/compositor.cpp b/modules/gui/qt/maininterface/compositor.cpp
index 090af0c6f3e..2185ddb998b 100644
--- a/modules/gui/qt/maininterface/compositor.cpp
+++ b/modules/gui/qt/maininterface/compositor.cpp
@@ -18,6 +18,7 @@
 
 #include "compositor.hpp"
 #include "compositor_dummy.hpp"
+#include "compositor_platform.hpp"
 #include "mainctx.hpp"
 #include "video_window_handler.hpp"
 #include "videosurface.hpp"
@@ -53,6 +54,7 @@ struct {
     Compositor* (*instantiate)(qt_intf_t *p_intf);
     bool (*preInit)(qt_intf_t *p_intf);
 } static compositorList[] = {
+    {"platform", &instanciateCompositor<CompositorPlatform>, &preInit<CompositorPlatform> },
 #ifdef _WIN32
 #ifdef HAVE_DCOMP_H
     {"dcomp", &instanciateCompositor<CompositorDirectComposition>, &preInit<CompositorDirectComposition> },
diff --git a/modules/gui/qt/qt.cpp b/modules/gui/qt/qt.cpp
index 1214f9fada0..fcf4f949ee3 100644
--- a/modules/gui/qt/qt.cpp
+++ b/modules/gui/qt/qt.cpp
@@ -266,6 +266,7 @@ static const char *const psz_raise_list_text[] =
 
 static const char *const compositor_vlc[] = {
     "auto",
+    "platform",
 #ifdef _WIN32
 #ifdef HAVE_DCOMP_H
     "dcomp"
@@ -279,6 +280,7 @@ static const char *const compositor_vlc[] = {
 };
 static const char *const compositor_user[] = {
     N_("Automatic"),
+    N_("Qt Platform"),
 #ifdef _WIN32
 #ifdef HAVE_DCOMP_H
     "Direct Composition",
-- 
GitLab

