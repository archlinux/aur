From bf6cdd3c09a432c42b0d424d4c0123d29f2e5b82 Mon Sep 17 00:00:00 2001
From: detiam <dehe_tian@outlook.com>
Date: Fri, 26 Jan 2024 22:53:40 +0800
Subject: [PATCH] reverts bd722f7

---
 src/rendervulkan.cpp           | 64 +++++++---------------------------
 src/rendervulkan.hpp           |  6 ----
 src/reshade_effect_manager.cpp |  4 +--
 3 files changed, 14 insertions(+), 60 deletions(-)

diff --git a/src/rendervulkan.cpp b/src/rendervulkan.cpp
index 3570186..db49b57 100644
--- a/src/rendervulkan.cpp
+++ b/src/rendervulkan.cpp
@@ -353,7 +353,6 @@ bool CVulkanDevice::selectPhysDev(VkSurfaceKHR surface)
 				}
 
 				m_queueFamily = computeOnlyIndex == ~0u ? generalIndex : computeOnlyIndex;
-				m_generalQueueFamily = generalIndex;
 				m_physDev = cphysDev;
 
 				if ( env_to_bool( getenv( "GAMESCOPE_FORCE_GENERAL_QUEUE" ) ) )
@@ -370,7 +369,7 @@ bool CVulkanDevice::selectPhysDev(VkSurfaceKHR surface)
 
 	VkPhysicalDeviceProperties props;
 	vk.GetPhysicalDeviceProperties( m_physDev, &props );
-	vk_log.infof( "selecting physical device '%s': queue family %x (general queue family %x)", props.deviceName, m_queueFamily, m_generalQueueFamily );
+	vk_log.infof( "selecting physical device '%s': queue family %x", props.deviceName, m_queueFamily );
 
 	return true;
 }
@@ -480,22 +479,12 @@ bool CVulkanDevice::createDevice()
 		.globalPriority = VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT
 	};
 
-	VkDeviceQueueCreateInfo queueCreateInfos[2] = 
-	{
-		{
-			.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
-			.pNext = g_bNiceCap ? &queueCreateInfoEXT : nullptr,
-			.queueFamilyIndex = m_queueFamily,
-			.queueCount = 1,
-			.pQueuePriorities = &queuePriorities
-		},
-		{
-			.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
-			.pNext = g_bNiceCap ? &queueCreateInfoEXT : nullptr,
-			.queueFamilyIndex = m_generalQueueFamily,
-			.queueCount = 1,
-			.pQueuePriorities = &queuePriorities
-		},
+	VkDeviceQueueCreateInfo queueCreateInfo = {
+		.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
+		.pNext = g_bNiceCap ? &queueCreateInfoEXT : nullptr,
+		.queueFamilyIndex = m_queueFamily,
+		.queueCount = 1,
+		.pQueuePriorities = &queuePriorities
 	};
 
 	std::vector< const char * > enabledExtensions;
@@ -571,8 +560,8 @@ bool CVulkanDevice::createDevice()
 	VkDeviceCreateInfo deviceCreateInfo = {
 		.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
 		.pNext = &features2,
-		.queueCreateInfoCount = m_queueFamily == m_generalQueueFamily ? 1u : 2u,
-		.pQueueCreateInfos = queueCreateInfos,
+		.queueCreateInfoCount = 1,
+		.pQueueCreateInfos = &queueCreateInfo,
 		.enabledExtensionCount = (uint32_t)enabledExtensions.size(),
 		.ppEnabledExtensionNames = enabledExtensions.data(),
 	};
@@ -601,17 +590,9 @@ bool CVulkanDevice::createDevice()
 	VkResult res = vk.CreateDevice(physDev(), &deviceCreateInfo, nullptr, &m_device);
 	if ( res == VK_ERROR_NOT_PERMITTED_KHR && g_bNiceCap )
 	{
-		fprintf(stderr, "vkCreateDevice failed with a high-priority queue (general + compute). Falling back to regular priority (general).\n");
-		queueCreateInfos[1].pNext = nullptr;
+		fprintf(stderr, "vkCreateDevice failed with a high-priority queue. Falling back to regular priority.\n");
+		queueCreateInfo.pNext = nullptr;
 		res = vk.CreateDevice(physDev(), &deviceCreateInfo, nullptr, &m_device);
-
-
-		if ( res == VK_ERROR_NOT_PERMITTED_KHR && g_bNiceCap )
-		{
-			fprintf(stderr, "vkCreateDevice failed with a high-priority queue (compute). Falling back to regular priority (all).\n");
-			queueCreateInfos[0].pNext = nullptr;
-			res = vk.CreateDevice(physDev(), &deviceCreateInfo, nullptr, &m_device);
-		}
 	}
 
 	if ( res != VK_SUCCESS )
@@ -625,10 +606,6 @@ bool CVulkanDevice::createDevice()
 	#undef VK_FUNC
 
 	vk.GetDeviceQueue(device(), m_queueFamily, 0, &m_queue);
-	if ( m_queueFamily == m_generalQueueFamily )
-		m_generalQueue = m_queue;
-	else
-		vk.GetDeviceQueue(device(), m_generalQueueFamily, 0, &m_generalQueue);
 
 	return true;
 }
@@ -803,24 +780,7 @@ bool CVulkanDevice::createPools()
 		return false;
 	}
 
-	VkCommandPoolCreateInfo generalCommandPoolCreateInfo = {
-		.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
-		.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,
-		.queueFamilyIndex = m_generalQueueFamily,
-	};
-
-	res = vk.CreateCommandPool(device(), &generalCommandPoolCreateInfo, nullptr, &m_generalCommandPool);
-	if ( res != VK_SUCCESS )
-	{
-		vk_errorf( res, "vkCreateCommandPool failed" );
-		return false;
-	}
-
-	VkDescriptorPoolSize poolSizes[3] {
-		{
-			VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-			uint32_t(m_descriptorSets.size()),
-		},
+	VkDescriptorPoolSize poolSizes[2] {
 		{
 			VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
 			uint32_t(m_descriptorSets.size()) * 2,
diff --git a/src/rendervulkan.hpp b/src/rendervulkan.hpp
index 98b3936..9c8aaf1 100644
--- a/src/rendervulkan.hpp
+++ b/src/rendervulkan.hpp
@@ -728,11 +728,8 @@ public:
 	inline VkPhysicalDevice physDev() {return m_physDev; }
 	inline VkInstance instance() { return m_instance; }
 	inline VkQueue queue() {return m_queue;}
-	inline VkQueue generalQueue() {return m_generalQueue;}
 	inline VkCommandPool commandPool() {return m_commandPool;}
-	inline VkCommandPool generalCommandPool() {return m_generalCommandPool;}
 	inline uint32_t queueFamily() {return m_queueFamily;}
-	inline uint32_t generalQueueFamily() {return m_generalQueueFamily;}
 	inline VkBuffer uploadBuffer() {return m_uploadBuffer;}
 	inline VkPipelineLayout pipelineLayout() {return m_pipelineLayout;}
 	inline int drmRenderFd() {return m_drmRendererFd;}
@@ -783,17 +780,14 @@ protected:
 	VkPhysicalDevice m_physDev = nullptr;
 	VkInstance m_instance = nullptr;
 	VkQueue m_queue = nullptr;
-	VkQueue m_generalQueue = nullptr;
 	VkSamplerYcbcrConversion m_ycbcrConversion = VK_NULL_HANDLE;
 	VkSampler m_ycbcrSampler = VK_NULL_HANDLE;
 	VkDescriptorSetLayout m_descriptorSetLayout = VK_NULL_HANDLE;
 	VkPipelineLayout m_pipelineLayout = VK_NULL_HANDLE;
 	VkDescriptorPool m_descriptorPool = VK_NULL_HANDLE;
 	VkCommandPool m_commandPool = VK_NULL_HANDLE;
-	VkCommandPool m_generalCommandPool = VK_NULL_HANDLE;
 
 	uint32_t m_queueFamily = -1;
-	uint32_t m_generalQueueFamily = -1;
 
 	int m_drmRendererFd = -1;
 	dev_t m_drmPrimaryDevId = 0;
diff --git a/src/reshade_effect_manager.cpp b/src/reshade_effect_manager.cpp
index 382a016..c10bd5d 100644
--- a/src/reshade_effect_manager.cpp
+++ b/src/reshade_effect_manager.cpp
@@ -865,7 +865,7 @@ bool ReshadeEffectPipeline::init(CVulkanDevice *device, const ReshadeEffectKey &
 		VkCommandBufferAllocateInfo commandBufferAllocateInfo =
         {
 			.sType              = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
-			.commandPool        = device->generalCommandPool(),
+			.commandPool        = device->commandPool(),
 			.level              = VK_COMMAND_BUFFER_LEVEL_PRIMARY,
 			.commandBufferCount = 1
 		};
@@ -878,7 +878,7 @@ bool ReshadeEffectPipeline::init(CVulkanDevice *device, const ReshadeEffectKey &
 			return false;
 		}
 
-        m_cmdBuffer.emplace(device, cmdBuffer, device->generalQueue(), device->generalQueueFamily());
+        m_cmdBuffer.emplace(device, cmdBuffer, device->queue(), device->queueFamily());
     }
 
     // Create Uniform Buffer
-- 
2.43.0

