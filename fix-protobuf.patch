diff --git a/cmake/Protobuf.cmake b/cmake/Protobuf.cmake
index f1feeb00e..f0891c50e 100644
--- a/cmake/Protobuf.cmake
+++ b/cmake/Protobuf.cmake
@@ -15,15 +15,13 @@ macro(p4c_obtain_protobuf)
     if(NOT Protobuf_FOUND)
       find_package(Protobuf REQUIRED)
     endif()
-    # Protobuf sets the protoc binary to a generator expression, which are problematic.
-    # They are problematic because they are only evaluated at build time.
-    # However, we may have scripts that depend on the actual build time during the configure phase.
-    # Hard code a custom binary instead.
-    find_program(PROTOC_BINARY protoc)
 
     if(ENABLE_PROTOBUF_STATIC)
       set(CMAKE_FIND_LIBRARY_SUFFIXES ${SAVED_CMAKE_FIND_LIBRARY_SUFFIXES})
     endif()
+    set(Protobuf_LIBRARY "protobuf::libprotobuf")
+    set(Protobuf_PROTOC_EXECUTABLE "protobuf::protoc")
+    set(PROTOC_BINARY "protobuf::protoc")
   else()
     # Google introduced another breaking change with protobuf 22.x by adding abseil as a new
     # dependency. https://protobuf.dev/news/2022-08-03/#abseil-dep We do not want abseil, so we stay
diff --git a/control-plane/CMakeLists.txt b/control-plane/CMakeLists.txt
index 1e59f9a56..4d1b504b9 100644
--- a/control-plane/CMakeLists.txt
+++ b/control-plane/CMakeLists.txt
@@ -52,7 +52,7 @@ add_custom_target (mkP4configdir
   ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/p4/config)
 add_custom_command(OUTPUT ${P4RUNTIME_GEN_SRCS} ${P4RUNTIME_GEN_HDRS}
   COMMAND ${Protobuf_PROTOC_EXECUTABLE}
-          -I${P4RUNTIME_STD_DIR} -I${CMAKE_CURRENT_SOURCE_DIR} -I${Protobuf_INCLUDE_DIR}
+          -I${P4RUNTIME_STD_DIR} -I${CMAKE_CURRENT_SOURCE_DIR}
           --cpp_out ${CMAKE_CURRENT_BINARY_DIR}
           --python_out ${CMAKE_CURRENT_BINARY_DIR}
           --experimental_allow_proto3_optional
