From 2d8d874e2d97f6c43d4fe318665fbe4a7e18eb72 Mon Sep 17 00:00:00 2001
From: Benjamin <benjamin_weigt@web.de>
Date: Wed, 26 Jul 2023 10:46:06 +0200
Subject: [PATCH] OAuth Mode (initial)

---
 ticktick/api.py | 38 +++++++++++++++++++++++++++-----------
 1 file changed, 27 insertions(+), 11 deletions(-)

diff --git a/ticktick/api.py b/ticktick/api.py
index 5b520bd..b187b5b 100644
--- a/ticktick/api.py
+++ b/ticktick/api.py
@@ -19,10 +19,16 @@ class TickTickClient:
 
     HEADERS = {'User-Agent': USER_AGENT}
 
+    OAuth_Mode = False
+
     def __init__(self, username: str, password: str, oauth: OAuth2) -> None:
         """
-        Initializes a client session. In order to interact with the API
-        a successful login must occur.
+        Initializes a client session. If username and password are provided, the client will log in to TickTick.
+        Otherwise, only the OAuth2/OpenAPI access will be initialized.
+
+        !!! THOROUGH WARNING: If you are using the OAuth2 method, only a handful of features are available!
+        These include creating tasks, completing tasks, and getting tasks. If you want access to everything else
+        (including the "state" dictionary), you must provide a username and password.
 
         Arguments:
             username: TickTick Username
@@ -44,7 +50,23 @@ def __init__(self, username: str, password: str, oauth: OAuth2) -> None:
         self.oauth_manager = oauth
         self._session = self.oauth_manager.session
 
-        self._prepare_session(username, password)
+        if username is None or password is None or username == '' or password == '':
+            self.OAuth_Mode = True
+            self.project = ProjectManager(self)
+            self.tag = TagsManager(self)
+            self.task = TaskManager(self)
+            self.state = {'NOTICE': 'You are using the OpenAPI/OAuth2 method. Please provide a username and password to'
+                                    'access the state.'}
+        else:
+            self._prepare_session(username, password)
+
+    def _prepare_session(self, username, password):
+        """
+        Creates all the necessary calls to prepare the session
+        """
+        self._login(username, password)
+        self._settings()
+        self.sync()
 
         # Mangers for the different operations
         self.focus = FocusTimeManager(self)
@@ -55,14 +77,6 @@ def __init__(self, username: str, password: str, oauth: OAuth2) -> None:
         self.tag = TagsManager(self)
         self.task = TaskManager(self)
 
-    def _prepare_session(self, username, password):
-        """
-        Creates all the necessary calls to prepare the session
-        """
-        self._login(username, password)
-        self._settings()
-        self.sync()
-
     def reset_local_state(self):
         """
         Resets the contents of the items in the [`state`](api.md#state) dictionary.
@@ -147,6 +161,8 @@ def sync(self):
         Raises:
             RunTimeError: If the request could not be completed.
         """
+        if self.OAuth_Mode:
+            return
         response = self.http_get(self.INITIAL_BATCH_URL, cookies=self.cookies, headers=self.HEADERS)
 
         # Inbox Id
