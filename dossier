#!/usr/bin/env bash

ProgName="$(basename -- "$0")"
ProgName="${ProgName:-dossier}"
Version="0.0.4"

sub_help(){
    echo -e "\e[38;5;212;1mUsage:\e[0;38;5;114m $ProgName \e[0;38;5;230;1m<\e[0;38;5;230msubcommand\e[1m>\e[0m"
    echo -e "\e[38;5;212;1mSubcommands:\e[0m"
    echo -e "    \e[38;5;114minstall     \e[38;5;230;1mInstall dotfiles in the current directory\e[0m"
    echo -e "    \e[38;5;114muninstall   \e[38;5;230;1mUninstall dotfiles in the current directory\e[0m"
     echo -e "    \e[38;5;114mreinstall   \e[38;5;230;1mReinstall dotfiles in the current directory\e[0m"
    echo -e "    \e[38;5;114minit        \e[38;5;230;1mCreate a basic dossier.config.json\e[0m"
    echo -e "    \e[38;5;114madd         \e[38;5;230;1mAdd a file to your dossier config\e[0m"
    echo -e "    \e[38;5;114mremove      \e[38;5;230;1mRemove a file from your dossier config\e[0m"
    echo ""
}

sub_h(){
    sub_help
}

sub_version() {
    echo -e "\e[38;5;114;1mVersion               \e[38;5;212m$Version\e[0m"
    echo -e "\e[38;5;114;1mCurrent Maintainer    \e[38;5;212mCallMeEcho\e[0m\n"
    echo -e "\e[38;5;114;1mContributors          \e[38;5;212mkawaegle
                      \e[38;5;212mmekb the turtle\e[0m"
}

sub_v() {
    sub_version
}

sub_install() {
    if [ -f "$HOME/.config/dossier.lock" ]; then
        echo "Dossier has already installed your dotfiles! Please use dossier uninstall"
        exit
    fi
    if [ -f "./dossier.config.json" ]; then
        IFS=$'\n'
        gum confirm "Are you sure you want to install these dotfiles?" && mkdir -p "$HOME/.config/dossier" && touch "$HOME/.config/dossier.lock" &&
        for row in $(jq -Mrc '.files[]' < dossier.config.json); do
            _jq() {
                jq -Mrc "${1}" <<< "${row}"
            }
            NAME="$(_jq '.name')"
            LOCATION="$(_jq '.location' | sed "s|^~|$HOME|")"
            if [ -h "${LOCATION}/${NAME}" ]; then
                echo -e "\e[38;5;212mLink Exists ${PWD}/${NAME} -> ${LOCATION}/${NAME}\e[0m"
            else
                if [ "$(_jq '.type')" == 'same' ]; then
                    echo -e "\e[38;5;212m${PWD}/${NAME} -> ${LOCATION}/${NAME}\e[0m"
                    rm -rf "${LOCATION:?}/${NAME}" &>/dev/null
                    ln -s "${PWD}/${NAME}" "${LOCATION}/${NAME}" &>/dev/null
                else
                    echo -e "\e[38;5;212m${PWD}/${NAME} -> ${LOCATION}\e[0m"
                    rm -rf "${LOCATION:?}" &>/dev/null
                    ln -s "${PWD}/${NAME}" "${LOCATION}" &>/dev/null
                fi
            fi
        done && echo -e "\e[38;5;114mAll links have been set up\e[0m" &&
        for row in $(jq -Mrc '.commands[]' < dossier.config.json); do
            _jq() {
                jq -Mrc "${1}" <<< "${row}"
            }
            COMMAND="$(_jq '.command')"
            MESSAGE="$(_jq '.message')"
            gum spin --title "$MESSAGE" -s line -- bash -c "$COMMAND" && echo -e "\e[38;5;114m$(_jq '.donemessage')\e[0m"
        done && mkdir -p "$HOME/.config/"
    else
        echo "This directory does not have a dossier config!"
    fi
}

sub_i() {
    sub_install
}

sub_preview() {
    if [ -f "./dossier.config.json" ]; then
        IFS=$'\n'
        for row in $(jq -Mrc '.files[]' < dossier.config.json); do
            _jq() {
                jq -Mrc "${1}" <<< "${row}"
            }
            NAME="$(_jq '.name')"
            LOCATION="$(_jq '.location' | sed "s|^~|$HOME|")"
            if [ -h "${LOCATION}/${NAME}" ]; then
                echo -e "\e[38;5;212mLink Exists ${PWD}/${NAME} -> ${LOCATION}/${NAME}\e[0m"
            else
                if [ "$(_jq '.type')" == 'same' ]; then
                    echo -e "\e[38;5;212m${PWD}/${NAME} -> ${LOCATION}/${NAME}\e[0m"
                else
                    echo -e "\e[38;5;212m${PWD}/${NAME} -> ${LOCATION}\e[0m"
                fi
            fi
        done &&
        mkdir -p "$HOME/.config/"
    else
        echo "This directory does not have a dossier config!"
    fi
}

sub_p() {
    sub_preview
}

sub_reinstall() {
    if [ -f "./dossier.config.json" ]; then
        IFS=$'\n'
        gum confirm "Are you sure you want to reinstall these dotfiles?" && mkdir -p "$HOME/.config/dossier" && touch "$HOME/.config/dossier.lock" &&
        for row in $(jq -Mrc '.files[]' < dossier.config.json); do
                _jq() {
                    jq -Mrc "${1}" <<< "${row}"
                }
                NAME="$(_jq '.name')"
                LOCATION="$(_jq '.location' | sed "s|^~|$HOME|")"
            if [ "$(_jq '.type')" == 'same' ]; then
                rm -rf "${LOCATION:?}/${NAME}"
            else
                rm -f "${LOCATION:?}"
            fi
        done &&
        for row in $(jq -Mrc '.files[]' < dossier.config.json); do
            _jq() {
                jq -Mrc "${1}" <<< "${row}"
            }
            NAME="$(_jq '.name')"
            LOCATION="$(_jq '.location' | sed "s|^~|$HOME|")"
            if [ ! -h "${LOCATION}/${NAME}" ]; then
                if [ "$(_jq '.type')" == 'same' ]; then
                    echo -e "\e[38;5;212m${PWD}/${NAME} -> ${LOCATION}/${NAME}\e[0m"
                    rm -rf "${LOCATION:?}/${NAME}" &>/dev/null
                    ln -s "${PWD}/${NAME}" "${LOCATION}/${NAME}" &>/dev/null
                else
                    echo -e "\e[38;5;212m${PWD}/${NAME} -> ${LOCATION}\e[0m"
                    rm -rf "${LOCATION:?}" &>/dev/null
                    ln -s "${PWD}/${NAME}" "${LOCATION}" &>/dev/null
                fi
            fi
        done && echo -e "\e[38;5;114mAll links have been set up\e[0m" &&
        for row in $(jq -Mrc '.commands[]' < dossier.config.json); do
            _jq() {
                jq -Mrc "${1}" <<< "${row}"
            }
            COMMAND="$(_jq '.command')"
            MESSAGE="$(_jq '.message')"
            gum spin --title "$MESSAGE" -s line -- bash -c "$COMMAND" && echo -e "\e[38;5;114m$(_jq '.donemessage')\e[0m"
        done && mkdir -p "$HOME/.config/"
    else
        echo "This directory does not have a dossier config!"
    fi
}

sub_uninstall() {
    if [ ! -f "$HOME/.config/dossier.lock" ]; then
        echo "Dossier hasn't installed your dotfiles yet!"
        exit
    fi
    IFS=$'\n'
    gum confirm "Are you sure you want to uninstall these dotfiles?
     This could lead to a broken desktop!" &&
    for row in $(jq -Mrc '.files[]' < dossier.config.json); do
        _jq() {
            jq -Mrc "${1}" <<< "${row}"
        }
        NAME="$(_jq '.name')"
        LOCATION="$(_jq '.location' | sed "s|^~|$HOME|")"
        if [ "$(_jq '.type')" == 'same' ]; then
            rm -rf "${LOCATION:?}/${NAME}"
            echo -e "\e[38;5;212mRemoved ${LOCATION:?}/${NAME}\e[0m"
        else
            rm -f "${LOCATION:?}"
            echo -e "\e[38;5;212mRemoved ${LOCATION:?}\e[0m"
        fi
    done && echo -e "\e[38;5;114mAll links have been removed\e[0m" && rm -f "$HOME/.config/dossier.lock"
}

sub_add() {
    if [ -f "./dossier.config.json" ]; then
        NAME=$(gum input --placeholder "What file should i track?")
        if [ -z "$NAME" ]; then
            echo "You need to specify what file to track!"
            exit
        fi
        EXISTS=$(jq ".files[] | select(.name == \"$NAME\")" < dossier.config.json)
        if [ -n "$EXISTS" ]; then
            echo "That file has already been added!"
            exit
        fi
        LOCATION=$(gum input --placeholder "Where should that file be symlinked? (eg ~/.config)")
        if [ -z "$LOCATION" ]; then
            echo "You need to specify where to symlink to!"
            exit
        fi
        echo "Is this file the same name as it will be when copied or different?"
        FILEFOLDER=$(gum choose same different)
        if [ -z "$FILEFOLDER" ]; then
            echo "You need to specify if this is a file or folder!"
            exit
        fi
        jq ".files += [{\"name\": \"$NAME\", \"location\": \"$LOCATION\", \"type\": \"$FILEFOLDER\"}]" < dossier.config.json | tee 'dossier.config.json' &>/dev/null
        if [ "$FILEFOLDER" == 'same' ]; then
            echo -e "\e[38;5;212m${PWD}/${NAME} will be symlinked to ${LOCATION}/${NAME} next time you install!\e[0m"
        else
            echo -e "\e[38;5;212m${PWD}/${NAME} will be symlinked to $LOCATION next time you install!\e[0m "
        fi
    else
        echo "This directory does not have a dossier config!"
    fi
}

sub_a() {
    sub_add
}

sub_remove() {
    if [ -f "./dossier.config.json" ]; then
        NAME=$(gum input --placeholder "What file should i stop tracking?")
        if [ -z "$NAME" ]; then
            echo "You need to specify what file to stop tracking!"
            exit
        fi
        jq "del(.files[] | select(.name == \"$NAME\"))" < dossier.config.json | tee 'dossier.config.json' &>/dev/null
    else
        echo "This directory does not have a dossier config!"
    fi
}

sub_r() {
    sub_remove
}

sub_init() {
    echo '{
    "files": [],
    "commands": []
}' > dossier.config.json
}

subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_"${subcommand}" "$@"
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$ProgName --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac
