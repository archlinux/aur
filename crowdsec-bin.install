post_install() {

COLLECTIONS=false
set -e


    if [[ ! -d /var/lib/crowdsec/data ]]; then
        mkdir -p /var/lib/crowdsec/data
    fi

    if [[ -d /var/lib/crowdsec/backup ]]; then
        cscli config restore /var/lib/crowdsec/backup/backup.config
        rm -rf /var/lib/crowdsec/backup
        /usr/bin/cscli hub update
        /usr/bin/cscli hub upgrade
        systemctl start crowdsec
    fi

    . /usr/share/crowdsec/wizard.sh -n
    if ! [[ -f /etc/crowdsec/acquis.yaml ]]; then
        echo Creating /etc/crowdsec/acquis.yaml
        set +e
        SILENT=true detect_services
        SILENT=true TMP_ACQUIS_FILE_SKIP=skip genacquisition
        set -e
        COLLECTIONS=true
    fi

    if [[ -f /etc/crowdsec/local_api_credentials.yaml ]] ; then
        chmod 600 /etc/crowdsec/local_api_credentials.yaml
    fi

    if [[ -f /etc/crowdsec/online_api_credentials.yaml ]]; then
        chmod 600 /etc/crowdsec/online_api_credentials.yaml
    fi

    if [[ ! -f /etc/crowdsec/local_api_credentials.yaml ]] || [[ ! -f /etc/crowdsec/online_api_credentials.yaml ]]; then
        if [[ ! -f /etc/crowdsec/local_api_credentials.yaml ]] ; then
            install -m 600 /dev/null  /etc/crowdsec/local_api_credentials.yaml
        fi
        if [[ ! -f /etc/crowdsec/online_api_credentials.yaml ]] ; then
            install -m 600 /dev/null  /etc/crowdsec/online_api_credentials.yaml
        fi

    fi

    echo Updating hub
    /usr/bin/cscli hub update
    if [ "$COLLECTIONS" = true ]; then
        set +e
        CSCLI_BIN_INSTALLED="/usr/bin/cscli" SILENT=true install_collection
        set -e
    fi


    if [[ -f /var/lib/crowdsec/data/crowdsec.db.backup ]]; then
        cp /var/lib/crowdsec/data/crowdsec.db.backup /var/lib/crowdsec/data/crowdsec.db
        rm -f /var/lib/crowdsec/data/crowdsec.db.backup
    fi

    systemctl --quiet is-enabled crowdsec || systemctl unmask crowdsec && systemctl enable crowdsec
    systemctl enable --now crowdsec-upgrade.timer

    API=$(cscli config show --key "Config.API.Server")
    if [ "$API" = "<nil>" ] ; then
        LAPI=false
    else
        PORT=$(cscli config show --key "Config.API.Server.ListenURI"|cut -d ":" -f2)
    fi
    if [ "$LAPI" = false ] || [ -z "$(ss -nlt "sport = ${PORT}" | grep -v ^State)" ]  ; then
        systemctl start crowdsec
    else
        echo "Not attempting to start crowdsec, port ${PORT} is already used or lapi was disabled"
        echo "This port is configured through /etc/crowdsec/config.yaml and /etc/crowdsec/local_api_credentials.yaml"
    fi

    echo "You can always run the configuration again interactively by using '/usr/share/crowdsec/wizard.sh -c"

}

post_upgrade() {

    OLD_MAJOR_VERSION=$(echo $2 | cut -d'.' -f1)
    OLD_MINOR_VERSION=$(echo $2 | cut -d'.' -f2)
    OLD_PATCH_VERSION=$(echo $2 | cut -d'.' -f3|cut -d'-' -f1)

    NEW_MAJOR_VERSION=$(echo $3 | cut -d'.' -f1)
    NEW_MINOR_VERSION=$(echo $3 | cut -d'.' -f2)
    NEW_PATCH_VERSION=$(echo $3 | cut -d'.' -f3|cut -d'-' -f1)

    OLD_MAJOR_VERSION=$(echo $2 | cut -d'.' -f1)
    OLD_MINOR_VERSION=$(echo $2 | cut -d'.' -f2)
    OLD_PATCH_VERSION=$(echo $2 | cut -d'.' -f3|cut -d'-' -f1)

    NEW_MAJOR_VERSION=$(echo $3 | cut -d'.' -f1)
    NEW_MINOR_VERSION=$(echo $3 | cut -d'.' -f2)
    NEW_PATCH_VERSION=$(echo $3 | cut -d'.' -f3|cut -d'-' -f1)


   if [[ $OLD_MAJOR_VERSION -eq "1" ]] && [[ $OLD_MINOR_VERSION -eq "0" ]] && [[ $OLD_PATCH_VERSION -lt "9" ]]; then
       if [[ -f /var/lib/crowdsec/data/crowdsec.db ]]; then
          cp /var/lib/crowdsec/data/crowdsec.db  /var/lib/crowdsec/data/crowdsec.db.backup
       fi
   fi

   if [[ $NEW_MAJOR_VERSION -gt  $OLD_MAJOR_VERSION ]]; then
      echo "Stopping crowdsec"
      systemctl stop crowdsec || true
      cscli config backup /var/lib/crowdsec/backup
   fi

    echo "You can always run the configuration again interactively by using '/usr/share/crowdsec/wizard.sh -c"

}


