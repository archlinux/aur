#! /bin/sh

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ] || [ -z "$1" ]; then
  cat <<EOF
$ release VERSION
Prepare a new version for release

Parameters:
  \$1: version number of new release

Example:
  $ release 1337
EOF
  exit
fi

command -v wget >/dev/null || { echo "wget is not installed" 1>&2; exit 127; }
command -v makepkg >/dev/null || { echo "makepkg was not found" 1>&2; exit 127; }
command -v git >/dev/null || { echo "git is not installed" 1>&2; exit 127; }

VERSION="$1"
CHECKSUMS_FILE="checksums-$VERSION.txt"

# update version nr
sed -r "s/^pkgver=.*$/pkgver=\"$VERSION\"/g" PKGBUILD -i

# get checksums
wget -q -nc "https://github.com/updatecli/updatecli/releases/download/v$VERSION/checksums.txt" -O $CHECKSUMS_FILE
SUM_x86="$(grep 'Linux_x86_64.tar.gz$' $CHECKSUMS_FILE | cut -d\  -f1)"
SUM_arm="$(grep 'Linux_arm64.tar.gz$' $CHECKSUMS_FILE | cut -d\  -f1)"

# upate shasums
sed -r "s/sha256sums_x86_64=\([\"'][^\"']+[\"']\)$/sha256sums_x86_64=(\"$SUM_x86\")/" PKGBUILD -i
sed -r "s/sha256sums_aarch64=\([\"'][^\"']+[\"']\)$/sha256sums_aarch64=(\"$SUM_arm\")/" PKGBUILD -i

# regenerate .SRCINFO
makepkg -f && makepkg --printsrcinfo > .SRCINFO

# check changes
git --no-pager diff PKGBUILD

# cleanup temp
rm -r src pkg *.tar*

git status
printf "Commit and push changes? (Y/n): "
read ans
if [ "$ans" != "n" ] && [ "$ans" != "N" ]; then
  git add -A
  git commit -m "Release $VERSION"
  git push origin
fi
