--- a/src/common/util/include/openvino/util/env_util.hpp
+++ b/src/common/util/include/openvino/util/env_util.hpp
@@ -4,6 +4,7 @@

 #pragma once

+#include <cstdint>
 #include <string>

 namespace ov {
--- a/src/frontends/onnx/onnx_common/src/onnx_model_validator.cpp
+++ b/src/frontends/onnx/onnx_common/src/onnx_model_validator.cpp
@@ -6,6 +6,7 @@

 #include <algorithm>
 #include <array>
+#include <cstdint>
 #include <exception>
 #include <map>
 #include <unordered_set>
--- a/src/inference/include/ie/ie_blob.h
+++ b/src/inference/include/ie/ie_blob.h
@@ -609,7 +609,7 @@ class TBlob : public MemoryBlob {
      * @return rvalue for the empty locked object of type T
      */
     virtual LockedMemory<T> data() noexcept {
-        return std::move(lockme<T>());
+        return lockme<T>();
     }

     /**
@@ -618,7 +618,7 @@ class TBlob : public MemoryBlob {
      * @return rvalue for the empty locked const object of type T.
      */
     virtual LockedMemory<const T> readOnly() const noexcept {
-        return std::move(lockme<const T>());
+        return lockme<const T>();
     }

     void allocate() noexcept override {
@@ -639,22 +639,22 @@ class TBlob : public MemoryBlob {
     }

     LockedMemory<void> buffer() noexcept override {
-        return std::move(lockme<void>());
+        return lockme<void>();
     }

     LockedMemory<const void> cbuffer() const noexcept override {
-        return std::move(lockme<const void>());
+        return lockme<const void>();
     }

     LockedMemory<void> rwmap() noexcept override {
-        return std::move(lockme<void>());
+        return lockme<void>();
     }

     LockedMemory<const void> rmap() const noexcept override {
-        return std::move(lockme<const void>());
+        return lockme<const void>();
     }
     LockedMemory<void> wmap() noexcept override {
-        return std::move(lockme<void>());
+        return lockme<void>();
     }

     Blob::Ptr createROI(const ROI& roi) const override {
--- a/src/plugins/intel_gpu/include/intel_gpu/graph/serialization/helpers.hpp
+++ b/src/plugins/intel_gpu/include/intel_gpu/graph/serialization/helpers.hpp
@@ -3,6 +3,8 @@
 //

 #pragma once
+
+#include <cstdint>
 #include <utility>
 #include <type_traits>

--- a/src/plugins/intel_gpu/include/intel_gpu/runtime/device_info.hpp
+++ b/src/plugins/intel_gpu/include/intel_gpu/runtime/device_info.hpp
@@ -4,6 +4,7 @@

 #pragma once

+#include <cstdint>
 #include <string>
 #include <vector>
 #include <tuple>
