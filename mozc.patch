--- src.orig/unix/uim/key_translator.h
+++ src/unix/uim/key_translator.h
@@ -38,8 +38,13 @@
 using __gnu_cxx::hash_map;
 
 #include "base/port.h"
+#include "base/vlog.h"
 #include "protocol/commands.pb.h"
 
+using std::string;
+typedef uint64_t uint64;
+typedef int32_t int32;
+
 namespace mozc {
 namespace uim {
 
@@ -49,6 +54,8 @@
 class KeyTranslator {
  public:
   KeyTranslator();
+  KeyTranslator(const KeyTranslator&) = delete;
+  KeyTranslator& operator=(const KeyTranslator&) = delete;
   virtual ~KeyTranslator();
 
   // Converts ibus keycode to Mozc key code and stores them on |out_event|.
@@ -101,8 +108,6 @@
   // 'Hiragana Letter Small U' (with Shift modifier).
   KanaMap kana_map_jp_;  // mapping for JP keyboard.
   KanaMap kana_map_us_;  // mapping for US keyboard.
-
-  DISALLOW_COPY_AND_ASSIGN(KeyTranslator);
 };
 
 }  // namespace uim
--- src.orig/unix/uim/key_translator.cc
+++ src/unix/uim/key_translator.cc
@@ -344,7 +344,7 @@
     /* regards yen key as backslash */
     out_event->set_key_code('\\');
   } else {
-    VLOG(1) << "Unknown keyval: " << keyval;
+    MOZC_VLOG(1) << "Unknown keyval: " << keyval;
     return false;
   }
 
@@ -367,28 +367,28 @@
 }
 
 void KeyTranslator::Init() {
-  for (int i = 0; i < arraysize(special_key_map); ++i) {
+  for (int i = 0; i < std::size(special_key_map); ++i) {
     CHECK(special_key_map_.insert(
         std::make_pair(special_key_map[i].from,
                        special_key_map[i].to)).second);
   }
-  for (int i = 0; i < arraysize(modifier_key_map); ++i) {
+  for (int i = 0; i < std::size(modifier_key_map); ++i) {
     CHECK(modifier_key_map_.insert(
         std::make_pair(modifier_key_map[i].from,
                        modifier_key_map[i].to)).second);
   }
-  for (int i = 0; i < arraysize(modifier_mask_map); ++i) {
+  for (int i = 0; i < std::size(modifier_mask_map); ++i) {
     CHECK(modifier_mask_map_.insert(
         std::make_pair(modifier_mask_map[i].from,
                        modifier_mask_map[i].to)).second);
   }
-  for (int i = 0; i < arraysize(kana_map_jp); ++i) {
+  for (int i = 0; i < std::size(kana_map_jp); ++i) {
     CHECK(kana_map_jp_.insert(
         std::make_pair(kana_map_jp[i].code,
                        std::make_pair(kana_map_jp[i].no_shift,    
                                       kana_map_jp[i].shift))).second);
   }
-  for (int i = 0; i < arraysize(kana_map_us); ++i) {
+  for (int i = 0; i < std::size(kana_map_us); ++i) {
     CHECK(kana_map_us_.insert(
         std::make_pair(kana_map_us[i].code,
                        std::make_pair(kana_map_us[i].no_shift,
