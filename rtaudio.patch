From cbd97bf48751baa2c215128aa8b28cb828f522a7 Mon Sep 17 00:00:00 2001
From: edward-p <edward@edward-p.xyz>
Date: Wed, 20 Dec 2023 15:54:26 +0800
Subject: [PATCH] fix for rtaudio6

---
 sink_modules/audio_sink/src/main.cpp     | 13 ++++++-------
 source_modules/audio_source/src/main.cpp | 11 +++++------
 2 files changed, 11 insertions(+), 13 deletions(-)

diff --git a/sink_modules/audio_sink/src/main.cpp b/sink_modules/audio_sink/src/main.cpp
index 15b7c26..5a1bf53 100644
--- a/sink_modules/audio_sink/src/main.cpp
+++ b/sink_modules/audio_sink/src/main.cpp
@@ -42,16 +42,15 @@ public:
         device = config.conf[_streamName]["device"];
         config.release(created);
 
-        int count = audio.getDeviceCount();
         RtAudio::DeviceInfo info;
-        for (int i = 0; i < count; i++) {
+        auto ids = audio.getDeviceIds();
+        for (int i = 0; i < ids.size(); i++) {
             try {
-                info = audio.getDeviceInfo(i);
-                if (!info.probed) { continue; }
+                info = audio.getDeviceInfo(ids[i]);
                 if (info.outputChannels == 0) { continue; }
-                if (info.isDefaultOutput) { defaultDevId = devList.size(); }
+                if (info.isDefaultOutput) { defaultDevId = i; }
                 devList.push_back(info);
-                deviceIds.push_back(i);
+                deviceIds.push_back(ids[i]);
                 txtDevList += info.name;
                 txtDevList += '\0';
             }
@@ -172,7 +171,7 @@ private:
             audio.startStream();
             stereoPacker.start();
         }
-        catch (RtAudioError& e) {
+        catch (RtAudioErrorType& e) {
             flog::error("Could not open audio device");
             return false;
         }
diff --git a/source_modules/audio_source/src/main.cpp b/source_modules/audio_source/src/main.cpp
index 99efa37..8958c5a 100644
--- a/source_modules/audio_source/src/main.cpp
+++ b/source_modules/audio_source/src/main.cpp
@@ -24,7 +24,7 @@ ConfigManager config;
 
 struct DeviceInfo {
     RtAudio::DeviceInfo info;
-    int id;
+    unsigned int id;
     bool operator==(const struct DeviceInfo& other) const {
         return other.id == id;
     }
@@ -83,17 +83,16 @@ public:
     void refresh() {
         devices.clear();
 
-        int count = audio.getDeviceCount();
-        for (int i = 0; i < count; i++) {
+        for (auto id:audio.getDeviceIds()) {
             try {
                 // Get info
-                auto info = audio.getDeviceInfo(i);
+                auto info = audio.getDeviceInfo(id);
 
                 // Check that it has a stereo input
-                if (info.probed && info.inputChannels < 2) { continue; }
+                if (info.inputChannels < 2) { continue; }
 
                 // Save info
-                DeviceInfo dinfo = { info, i };
+                DeviceInfo dinfo = { info, id };
                 devices.define(info.name, info.name, dinfo);
             }
             catch (std::exception e) {
-- 
2.43.0

