diff --git a/clang-tools-extra/clangd/Hover.cpp b/clang-tools-extra/clangd/Hover.cpp
index a868d3bb4e3f..1fa4fedb3fbb 100644
--- a/clang-tools-extra/clangd/Hover.cpp
+++ b/clang-tools-extra/clangd/Hover.cpp
@@ -995,6 +995,52 @@ bool isHardLineBreakAfter(llvm::StringRef Line, llvm::StringRef Rest) {
   return punctuationIndicatesLineBreak(Line) || isHardLineBreakIndicator(Rest);
 }
 
+static uint64_t calcRecordPaddings(const RecordDecl *Record, HoverInfo &HI,
+                                   const ASTContext &Ctx) {
+  std::optional<uint64_t> TotalPaddings;
+  if (const auto *CxxRecord = llvm::dyn_cast<CXXRecordDecl>(Record)) {
+    for (const auto &Base : CxxRecord->bases()) {
+      if (Base.isVirtual())
+        continue;
+      if (const auto *RecordBase = Base.getType()->getAsRecordDecl()) {
+        if (const auto Paddings = calcRecordPaddings(RecordBase, HI, Ctx)) {
+          if (!TotalPaddings)
+            TotalPaddings = Paddings;
+          else
+            *TotalPaddings += Paddings;
+        }
+      }
+    }
+  }
+
+  uint64_t RecordSize = 0;
+  if (auto Size = Ctx.getTypeSizeInCharsIfKnown(Record->getTypeForDecl()))
+    RecordSize = Size->getQuantity() * 8;
+  const ASTRecordLayout &Layout = Ctx.getASTRecordLayout(Record);
+  const auto FieldsCount = Layout.getFieldCount();
+  for (const auto &Field : Record->fields()) {
+    const auto FiledID = Field->getFieldIndex();
+    uint64_t FieldSize = 0;
+    if (Field->isBitField())
+      FieldSize = Field->getBitWidthValue(Ctx);
+    else if (auto Size = Ctx.getTypeSizeInCharsIfKnown(Field->getType()))
+      FieldSize = Field->isZeroSize(Ctx) ? 0 : Size->getQuantity() * 8;
+    const auto EndOfField = Layout.getFieldOffset(FiledID) + FieldSize;
+    const auto NextOffset = FiledID < FieldsCount - 1
+                                ? Layout.getFieldOffset(FiledID + 1)
+                                : (RecordSize != 0 ? RecordSize : EndOfField);
+    const auto Padding = NextOffset - EndOfField;
+    if (!TotalPaddings)
+      TotalPaddings = Padding;
+    else if (Record->isUnion())
+      TotalPaddings = std::min(*TotalPaddings, Padding);
+    else
+      *TotalPaddings += Padding;
+  }
+
+  return TotalPaddings ? *TotalPaddings : 0;
+}
+
 void addLayoutInfo(const NamedDecl &ND, HoverInfo &HI) {
   if (ND.isInvalidDecl())
     return;
@@ -1003,8 +1049,11 @@ void addLayoutInfo(const NamedDecl &ND, HoverInfo &HI) {
   if (auto *RD = llvm::dyn_cast<RecordDecl>(&ND)) {
     if (auto Size = Ctx.getTypeSizeInCharsIfKnown(RD->getTypeForDecl()))
       HI.Size = Size->getQuantity() * 8;
-    if (!RD->isDependentType() && RD->isCompleteDefinition())
+    if (!RD->isDependentType() && RD->isCompleteDefinition()) {
       HI.Align = Ctx.getTypeAlign(RD->getTypeForDecl());
+      if (const auto *Record = RD->getDefinition(); Record && HI.Size)
+        HI.Padding = calcRecordPaddings(Record, HI, Ctx);
+    }
     return;
   }
 
@@ -1422,6 +1471,11 @@ static std::string formatOffset(uint64_t OffsetInBits) {
   return Offset;
 }
 
+static bool isKindRecord(index::SymbolKind Kind) {
+  return Kind == index::SymbolKind::Class ||
+         Kind == index::SymbolKind::Struct || Kind == index::SymbolKind::Union;
+}
+
 markup::Document HoverInfo::present() const {
   markup::Document Output;
 
@@ -1488,13 +1542,16 @@ markup::Document HoverInfo::present() const {
     Output.addParagraph().appendText("Offset: " + formatOffset(*Offset));
   if (Size) {
     auto &P = Output.addParagraph().appendText("Size: " + formatSize(*Size));
-    if (Padding && *Padding != 0) {
+    if (Padding && *Padding != 0 && !isKindRecord(Kind)) {
       P.appendText(
           llvm::formatv(" (+{0} padding)", formatSize(*Padding)).str());
     }
     if (Align)
       P.appendText(", alignment " + formatSize(*Align));
   }
+  if (Padding && *Padding != 0 && isKindRecord(Kind)) {
+    Output.addParagraph().appendText("Paddings: " + formatOffset(*Padding));
+  }
 
   if (CalleeArgInfo) {
     assert(CallPassType);
