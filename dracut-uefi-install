#!/bin/bash -e

[ -f "/etc/dracut-uefi-hook.conf" ] && source /etc/dracut-uefi-hook.conf

ESP_PATH=$(bootctl --print-esp-path)
MACHINE_ID=$(</etc/machine-id)
source <(grep '^BUILD_ID=' /etc/os-release)

declare -A kernels
dracut_update=0

while read -r line; do
    if [[ $line =~ ^usr/lib/modules/([^/]+)/pkgbase$ ]]; then
        read -r pkgbase < "/${line}"
        kernels["${pkgbase}"]="${BASH_REMATCH[1]}"
    else
        dracut_update=1 # Dracut files have been updated
        break 
    fi
done

if (( dracut_update )); then
    for candidate in /usr/lib/modules/*; do
        [ -f "$candidate/pkgbase" ] || continue
        if read -r pkgbase &> /dev/null < "$candidate/pkgbase"; then
            kernels["${pkgbase}"]="$(basename "$candidate")"
        fi
    done
fi

for kernel in "${!kernels[@]}"; do
    version="${kernels[$kernel]}"
    path="/usr/lib/modules/${version}/pkgbase"
    
    read -r pkgbase < "$path"

    echo "==> Building linux image $kernel ($version)"
    
    if [[ "$hook_for_pretty_name" == "true" ]]; then
        tmp_file=$(mktemp)
        cat /etc/os-release > "$tmp_file"
        echo "VERSION_ID=\"$pkgbase $version\"" >> "$tmp_file"
        unshare -m /bin/sh -c "mount --bind '$tmp_file' /etc/os-release && dracut -q -f --uefi --kver '${version}'"
        rm "$tmp_file"
    else
        dracut -q -f --uefi --kver "${version}"
    fi

    if [[ "$pkgbase" == "$default_kernel_package" ]]; then
        echo "===> Mark linux image $kernel ($version) as default"
        bootctl set-default "linux-${version}-${MACHINE_ID}-${BUILD_ID}.efi" || {
        	echo "===> Unable to mark linux image $kernel ($version) as default" >&2
        }
    fi
done
