Index: alire-1.2.2/alire.toml
===================================================================
--- alire-1.2.2.orig/alire.toml
+++ alire-1.2.2/alire.toml
@@ -46,7 +46,7 @@ ada_toml = { url = "https://github.com/p
 ajunitgen = { url = "https://github.com/mosteo/ajunitgen.git", commit = "e5d01db5e7834d15c4066f0a8e33d780deae3cc9" }
 ansiada = { url = "https://github.com/mosteo/ansi-ada.git", commit = "acf9afca3afe1f8b8843c061f3cef860d7567307" }
 clic = { url = "https://github.com/alire-project/clic.git", commit = "185519d65b089c3238e24cfe87f1d22db1f3e0d9" }
-gnatcoll = { url = "https://github.com/alire-project/gnatcoll-core.git", commit = "92bb91130a9ec628b4c48b7ef9fe7f24d9dc25fa" }
+gnatcoll = { url = "https://github.com/alire-project/gnatcoll-core.git", commit = "403efe11405113cf12ae3d014df474cf7a046176" }
 minirest = { url = "https://github.com/mosteo/minirest.git", commit = "4550aa356d55b9cd55f26acd34701f646021c5ff" }
 optional = { url = "https://github.com/mosteo/optional.git", commit = "0c7d20c0c8b48ccb6b25fb648d48382e598c25c3" }
 semantic_versioning = { url = "https://github.com/alire-project/semantic_versioning.git", commit = "fe4e72e40786589a66d53662639f894fcdb3419c" }
Index: alire-1.2.2/src/alire/alire-index_on_disk-loading.adb
===================================================================
--- alire-1.2.2.orig/src/alire/alire-index_on_disk-loading.adb
+++ alire-1.2.2/src/alire/alire-index_on_disk-loading.adb
@@ -236,7 +236,6 @@ package body Alire.Index_On_Disk.Loading
       Indexes := Find_All (From, Result);
       if not Result.Success then
          Raise_Checked_Error (Message (Result));
-         return;
       end if;
 
       if Indexes.Is_Empty then
@@ -248,7 +248,6 @@ package body Alire.Index_On_Disk.Loading
             if not Outcome.Success then
                Raise_Checked_Error
                  ("Could not add community index: " & Message (Outcome));
-               return;
             end if;
          end;
       end if;
Index: alire-1.2.2/src/alire/alire-solutions.ads
===================================================================
--- alire-1.2.2.orig/src/alire/alire-solutions.ads
+++ alire-1.2.2/src/alire/alire-solutions.ads
@@ -420,6 +420,17 @@ package Alire.Solutions is
    --  a safe-order traversal of a solution. This procedure is currently
    --  sequential but it could be parallelized in the future.
 
+   function Pin_Dependencies (This  : Solution;
+                              Crate : Crate_Name;
+                              Props : Alire.Properties.Vector)
+                              return Conditional.Dependencies
+   is (if This.State (Crate).Has_Release
+       then This.State (Crate).Release.Dependencies (Props)
+       else Conditional.No_Dependencies);
+   --  If Crate is pinned in This and it has a release, return its
+   --  dependencies; otherwise return Empty. WORKAROUND FOR VISIBILITY BUG
+   --  IN GCC 13.1
+
 private
 
    type Solution is new Interfaces.Tomifiable with record
Index: alire-1.2.2/src/alr/alr-commands-search.adb
===================================================================
--- alire-1.2.2.orig/src/alr/alr-commands-search.adb
+++ alire-1.2.2/src/alr/alr-commands-search.adb
@@ -91,8 +91,6 @@ package body Alr.Commands.Search is
          Tab.Append (Alire.Index.Crate (Name).TTY_Description);
          Tab.Append (Ext.Image);
       end List_Undetected;
-
-      use Alire.Releases.Containers.Release_Sets;
    begin
 
       --  First, simpler case of search into crates
