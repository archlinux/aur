diff --git a/Source/Core/Core/HW/WiiSave.cpp b/Source/Core/Core/HW/WiiSave.cpp
index e706f19afe..8843f19ba6 100644
--- a/Source/Core/Core/HW/WiiSave.cpp
+++ b/Source/Core/Core/HW/WiiSave.cpp
@@ -113,7 +113,7 @@ public:
     if (header.banner_size > sizeof(header.banner))
     {
       ERROR_LOG_FMT(CORE, "NandStorage::ReadHeader: {} corrupted banner_size: {:x}", banner_path,
-                    header.banner_size);
+                    static_cast<int>(header.banner_size));
       return {};
     }
     header.tid = m_tid;
@@ -556,7 +556,7 @@ CopyResult Import(const std::string& data_bin_path, std::function<bool()> can_ov
   if (!WiiUtils::EnsureTMDIsImported(*ios.GetFS(), ios.GetESCore(), header->tid))
   {
     ERROR_LOG_FMT(CORE, "WiiSave::Import: Failed to find or import TMD for title {:16x}",
-                  header->tid);
+                  static_cast<int>(header->tid));
     return CopyResult::TitleMissing;
   }
 
diff --git a/Source/Core/DiscIO/NANDImporter.cpp b/Source/Core/DiscIO/NANDImporter.cpp
index 8ab09da8b3..a098a0ea86 100644
--- a/Source/Core/DiscIO/NANDImporter.cpp
+++ b/Source/Core/DiscIO/NANDImporter.cpp
@@ -105,7 +105,7 @@ bool NANDImporter::FindSuperblock()
       continue;
     }
 
-    INFO_LOG_FMT(DISCIO, "Superblock #{} has version {:#x}", i, superblock->version);
+    INFO_LOG_FMT(DISCIO, "Superblock #{} has version {:#x}", i, static_cast<int>(superblock->version));
 
     if (!m_superblock || superblock->version > m_superblock->version)
       m_superblock = std::move(superblock);
@@ -117,7 +117,7 @@ bool NANDImporter::FindSuperblock()
     return false;
   }
 
-  INFO_LOG_FMT(DISCIO, "Using superblock version {:#x}", m_superblock->version);
+  INFO_LOG_FMT(DISCIO, "Using superblock version {:#x}", static_cast<int>(m_superblock->version));
   return true;
 }
 
@@ -144,7 +144,7 @@ void NANDImporter::ProcessEntry(u16 entry_number, const std::string& parent_path
     const NANDFSTEntry entry = m_superblock->fst[entry_number];
 
     const std::string path = GetPath(entry, parent_path);
-    INFO_LOG_FMT(DISCIO, "Entry: {} Path: {}", entry, path);
+    INFO_LOG_FMT(DISCIO, "Entry: {} Path: {}", entry.name, path);
     m_update_callback();
 
     Type type = static_cast<Type>(entry.mode & 3);
@@ -161,7 +161,7 @@ void NANDImporter::ProcessEntry(u16 entry_number, const std::string& parent_path
     }
     else
     {
-      ERROR_LOG_FMT(DISCIO, "Ignoring unknown entry type for {}", entry);
+      ERROR_LOG_FMT(DISCIO, "Ignoring unknown entry type for {}", entry.name);
     }
 
     entry_number = entry.sib;
