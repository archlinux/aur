diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index c3367ca..b197010 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -14,6 +14,11 @@ set(Source_Files__TopLevel
     ${CMAKE_CURRENT_SOURCE_DIR}/Context.cpp
 )
 
+if (DEFINED SHIP_BIN_DIR)
+    set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/Context.cpp
+        PROPERTIES COMPILE_DEFINITIONS SHIP_BIN_DIR="${SHIP_BIN_DIR}")
+endif()
+
 source_group("" FILES ${Source_Files__TopLevel})
 target_sources(libultraship PRIVATE ${Source_Files__TopLevel})
 
diff --git a/src/Context.cpp b/src/Context.cpp
index 113fd2d..3792058 100644
--- a/src/Context.cpp
+++ b/src/Context.cpp
@@ -281,6 +281,9 @@ std::string Context::GetShortName() {
 }
 
 std::string Context::GetAppBundlePath() {
+#ifdef SHIP_BIN_DIR
+    return SHIP_BIN_DIR;
+#else
 #ifdef __APPLE__
     FolderManager folderManager;
     return folderManager.getMainBundlePath();
@@ -294,6 +297,7 @@ std::string Context::GetAppBundlePath() {
 #endif
 
     return ".";
+#endif
 }
 
 std::string Context::GetAppDirectoryPath() {
@@ -304,6 +308,13 @@ std::string Context::GetAppDirectoryPath() {
     }
 #endif
 
+    char *prefpath = SDL_GetPrefPath(NULL, "soh");
+    if (prefpath != NULL) {
+        std::string ret(prefpath);
+        SDL_free(prefpath);
+        return ret;
+    }
+
     return ".";
 }
 
@@ -314,4 +325,22 @@ std::string Context::GetPathRelativeToAppBundle(const std::string path) {
 std::string Context::GetPathRelativeToAppDirectory(const std::string path) {
     return GetAppDirectoryPath() + "/" + path;
 }
+
+std::string Context::FindFileFromAllAppDirectories(const char* path) {
+    std::string fpath;
+
+    // app configuration dir (eg. ~/.local/share)
+    fpath = GetPathRelativeToAppDirectory(path);
+    if (std::filesystem::exists(fpath)) {
+        return fpath;
+    }
+    // app install dir (eg. /usr/)
+    fpath = GetPathRelativeToAppBundle(path);
+    if (std::filesystem::exists(fpath)) {
+        return fpath;
+    }
+    // current dir
+    return "./" + std::string(path);
+}
+
 } // namespace LUS
diff --git a/src/Context.h b/src/Context.h
index 3f1b750..c31864e 100644
--- a/src/Context.h
+++ b/src/Context.h
@@ -29,6 +29,7 @@ class Context {
     static std::string GetAppDirectoryPath();
     static std::string GetPathRelativeToAppDirectory(const std::string path);
     static std::string GetPathRelativeToAppBundle(const std::string path);
+    static std::string FindFileFromAllAppDirectories(const char* path);
 
     Context(std::string name, std::string shortName, std::string configFilePath);
     ~Context();
diff --git a/src/public/libultra/os.cpp b/src/public/libultra/os.cpp
index 2025557..a007734 100644
--- a/src/public/libultra/os.cpp
+++ b/src/public/libultra/os.cpp
@@ -14,8 +14,8 @@ int32_t osContInit(OSMesgQueue* mq, uint8_t* controllerBits, OSContStatus* statu
     }
 
 #ifndef __SWITCH__
-    const char* controllerDb = "gamecontrollerdb.txt";
-    int mappingsAdded = SDL_GameControllerAddMappingsFromFile(controllerDb);
+    std::string controllerDb = LUS::Context::FindFileFromAllAppDirectories("gamecontrollerdb.txt");
+    int mappingsAdded = SDL_GameControllerAddMappingsFromFile(controllerDb.c_str());
     if (mappingsAdded >= 0) {
         SPDLOG_INFO("Added SDL game controllers from \"{}\" ({})", controllerDb, mappingsAdded);
     } else {
@@ -78,4 +78,4 @@ int32_t osRecvMesg(OSMesgQueue* mq, OSMesg* msg, int32_t flag) {
     mq->validCount--;
     return 0;
 }
-}
\ No newline at end of file
+}
