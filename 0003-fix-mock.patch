From af4aa8a7b38a917f5c0a2921f102a6079d56fd6e Mon Sep 17 00:00:00 2001
From: Ian Stapleton Cordasco <graffatcolmingov@gmail.com>
Date: Thu, 14 Oct 2021 09:47:20 -0500
Subject: [PATCH] Remove old CI, add GitHub Actions

Add pre-commit and update tox and setup.cfg
---
 tests/test_options.py | 136 ++++++++++++++++++++++++++----------------
 1 file changed, 83 insertions(+), 53 deletions(-)

diff --git a/tests/test_options.py b/tests/test_options.py
index dcc43cd..1e4f96a 100644
--- a/tests/test_options.py
+++ b/tests/test_options.py
@@ -1,40 +1,51 @@
 """Tests for our options submodule."""
 import optparse
 import os
+from unittest import mock
 
-import mock
 import pytest
 
 from flake8_polyfill import options
 
 
-@pytest.mark.parametrize('value,expected', [
-    ('E123,\n\tW234,\n    E206', ['E123', 'W234', 'E206']),
-    ('E123,W234,E206', ['E123', 'W234', 'E206']),
-    (['E123', 'W234', 'E206'], ['E123', 'W234', 'E206']),
-    (['E123', '\n\tW234', '\n    E206'], ['E123', 'W234', 'E206']),
-])
+@pytest.mark.parametrize(
+    "value,expected",
+    [
+        ("E123,\n\tW234,\n    E206", ["E123", "W234", "E206"]),
+        ("E123,W234,E206", ["E123", "W234", "E206"]),
+        (["E123", "W234", "E206"], ["E123", "W234", "E206"]),
+        (["E123", "\n\tW234", "\n    E206"], ["E123", "W234", "E206"]),
+    ],
+)
 def test_parse_comma_separated_list(value, expected):
     """Verify that similar inputs produce identical outputs."""
     assert options.parse_comma_separated_list(value) == expected
 
 
-@pytest.mark.parametrize('value,expected', [
-    ('flake8', 'flake8'),
-    ('../flake8', os.path.abspath('../flake8')),
-    ('flake8/', os.path.abspath('flake8')),
-])
+@pytest.mark.parametrize(
+    "value,expected",
+    [
+        ("flake8", "flake8"),
+        ("../flake8", os.path.abspath("../flake8")),
+        ("flake8/", os.path.abspath("flake8")),
+    ],
+)
 def test_normalize_path(value, expected):
     """Verify that we normalize paths provided to the tool."""
     assert options.normalize_path(value) == expected
 
 
-@pytest.mark.parametrize('value,expected', [
-    ('file.py', 'file.py'),
-    ('path/file.py', os.path.abspath('path/file.py')),
-    (['file.py', 'path/file.py'],
-     ['file.py', os.path.abspath('path/file.py')]),
-])
+@pytest.mark.parametrize(
+    "value,expected",
+    [
+        ("file.py", "file.py"),
+        ("path/file.py", os.path.abspath("path/file.py")),
+        (
+            ["file.py", "path/file.py"],
+            ["file.py", os.path.abspath("path/file.py")],
+        ),
+    ],
+)
 def test_parse_normalized_paths(value, expected):
     """Verify that we handle strings and lists when normalizing paths."""
     assert options.parse_normalized_paths(value) == expected
@@ -43,26 +54,30 @@ def test_parse_normalized_paths(value, expected):
 @pytest.mark.parametrize(
     # NOTE: `defaults` has NO impact, since the callback being called implies
     # that a `value` was specified.
-    'comma_separated_list, normalize_paths, defaults, value, expected_value', [
-        (True, True, {}, 'val', 'N(C(val))'),
-        (True, True, {'foo': 'defaultval'}, 'val', 'N(C(val))'),
-        (True, False, {}, 'val', 'C(val)'),
-        (True, False, {'foo': 'defaultval'}, 'val', 'C(val)'),
-        (False, False, {}, 'val', 'val'),
-        (False, False, {'foo': 'defaultval'}, 'val', 'val'),
-    ]
+    "comma_separated_list, normalize_paths, defaults, value, expected_value",
+    [
+        (True, True, {}, "val", "N(C(val))"),
+        (True, True, {"foo": "defaultval"}, "val", "N(C(val))"),
+        (True, False, {}, "val", "C(val)"),
+        (True, False, {"foo": "defaultval"}, "val", "C(val)"),
+        (False, False, {}, "val", "val"),
+        (False, False, {"foo": "defaultval"}, "val", "val"),
+    ],
 )
 def test_generate_callback_from_composition(
-        comma_separated_list, normalize_paths, defaults,
-        value, expected_value,
+    comma_separated_list,
+    normalize_paths,
+    defaults,
+    value,
+    expected_value,
 ):
     """Verify our generate_callback_from composition.
 
     We mock out parse_comma_separated_list and parse_normalized_paths with
     simple string transformations for better readability.
     """
-    dest = 'foo'
-    opt_str = '--foo'
+    dest = "foo"
+    opt_str = "--foo"
     option = optparse.Option(opt_str, dest=dest)
     parser = mock.Mock(values=optparse.Values(defaults))
 
@@ -73,13 +88,14 @@ def test_generate_callback_from_composition(
         base_callback=base_callback,
     )
 
-    with mock.patch('flake8_polyfill.options.parse_comma_separated_list') as \
-            parse_comma_separated_list, \
-            mock.patch('flake8_polyfill.options.parse_normalized_paths') as \
-            parse_normalized_paths:
+    with mock.patch(
+        "flake8_polyfill.options.parse_comma_separated_list"
+    ) as parse_comma_separated_list, mock.patch(
+        "flake8_polyfill.options.parse_normalized_paths"
+    ) as parse_normalized_paths:
 
-        parse_comma_separated_list.side_effect = lambda v: 'C({})'.format(v)
-        parse_normalized_paths.side_effect = lambda v: 'N({})'.format(v)
+        parse_comma_separated_list.side_effect = lambda v: f"C({v})"
+        parse_normalized_paths.side_effect = lambda v: f"N({v})"
         callback(option, opt_str, value, parser)
 
     base_callback.assert_called_with(option, opt_str, expected_value, parser)
@@ -87,45 +103,59 @@ def test_generate_callback_from_composition(
 
 def test_store_callback():
     """Verify the default callback behaves like option with action='store'."""
-    dest = 'foo'
-    opt_str = '--foo'
+    dest = "foo"
+    opt_str = "--foo"
     option = optparse.Option(opt_str, dest=dest)
-    parser = mock.Mock(values=optparse.Values({'foo': 'defaultval'}))
-    options.store_callback(option, opt_str, 'val', parser)
-    assert parser.values.foo == 'val'
+    parser = mock.Mock(values=optparse.Values({"foo": "defaultval"}))
+    options.store_callback(option, opt_str, "val", parser)
+    assert parser.values.foo == "val"
 
 
 @pytest.fixture
 def parser():
     """Provide a pycodestyle-esque OptionParser instance."""
-    parser = optparse.OptionParser('flake8')
+    parser = optparse.OptionParser("flake8")
     parser.config_options = []
     return parser
 
 
 def test_register_with_store_callback(parser):
     """Verify we handle typical no-custom-callback case (integration test)."""
-    options.register(parser, '--foo', default=['path/file.py'], type='string',
-                     comma_separated_list=True, normalize_paths=True)
+    options.register(
+        parser,
+        "--foo",
+        default=["path/file.py"],
+        type="string",
+        comma_separated_list=True,
+        normalize_paths=True,
+    )
     values, _ = parser.parse_args([])
-    assert values.foo == ['path/file.py']  # default is used in its entirety
-    values, _ = parser.parse_args(['--foo=file.py,path/file.py'])
-    assert values.foo == ['file.py', os.path.abspath('path/file.py')]
+    assert values.foo == ["path/file.py"]  # default is used in its entirety
+    values, _ = parser.parse_args(["--foo=file.py,path/file.py"])
+    assert values.foo == ["file.py", os.path.abspath("path/file.py")]
 
 
 def test_register_with_custom_callback(parser):
     """Verify we handle custom callback (integration test)."""
+
     def custom_callback(option, opt_str, value, parser, *args, **kwargs):
         parser.values.count = len(value)
 
-    options.register(parser, '--foo', type='string', callback=custom_callback,
-                     comma_separated_list=True, normalize_paths=True)
-    values, _ = parser.parse_args(['--foo=file.py,path/file.py'])
+    options.register(
+        parser,
+        "--foo",
+        type="string",
+        callback=custom_callback,
+        comma_separated_list=True,
+        normalize_paths=True,
+    )
+    values, _ = parser.parse_args(["--foo=file.py,path/file.py"])
     assert values.count == 2
 
 
 def test_register_parse_from_config(parser):
     """Verify we append to config_options on registration."""
-    options.register(parser, '--select', default='E123,W504',
-                     parse_from_config=True)
-    assert 'select' in parser.config_options
+    options.register(
+        parser, "--select", default="E123,W504", parse_from_config=True
+    )
+    assert "select" in parser.config_options
-- 
2.44.0

