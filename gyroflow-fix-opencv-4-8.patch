diff --unified --recursive --text --new-file --color gyroflow-1.5.2.old/src/core/Cargo.toml gyroflow-1.5.2.new/src/core/Cargo.toml
--- gyroflow-1.5.2.old/src/core/Cargo.toml	2023-07-13 03:55:46.000000000 +0800
+++ gyroflow-1.5.2.new/src/core/Cargo.toml	2023-07-17 15:13:40.211660037 +0800
@@ -61,7 +61,7 @@
 libloading = "0.8"
 libc = "0.2"
 
-opencv = { version = "0.81", features = ["clang-runtime"], optional = true }
+opencv = { version = "0.83", features = ["clang-runtime"], optional = true }
 
 wgpu       = { git = "https://github.com/gfx-rs/wgpu.git", rev = "89f721f", features = ["spirv"] }
 wgpu-hal   = { git = "https://github.com/gfx-rs/wgpu.git", rev = "89f721f" }
diff --unified --recursive --text --new-file --color gyroflow-1.5.2.old/src/core/synchronization/optical_flow/opencv_dis.rs gyroflow-1.5.2.new/src/core/synchronization/optical_flow/opencv_dis.rs
--- gyroflow-1.5.2.old/src/core/synchronization/optical_flow/opencv_dis.rs	2023-07-13 03:55:46.000000000 +0800
+++ gyroflow-1.5.2.new/src/core/synchronization/optical_flow/opencv_dis.rs	2023-07-18 09:52:14.782938495 +0800
@@ -9,7 +9,7 @@
 use std::sync::Arc;
 use parking_lot::RwLock;
 #[cfg(feature = "use-opencv")]
-use opencv::{ core::{ Mat, Size, CV_8UC1, Vec2f }, prelude::{ MatTraitConst, DenseOpticalFlow } };
+use opencv::{ core::{ Mat, Size, CV_8UC1, Vec2f }, prelude::{ MatTraitConst, DenseOpticalFlowTrait } };
 
 #[derive(Clone)]
 pub struct OFOpenCVDis {
@@ -53,7 +53,7 @@
                 let a2_img = unsafe { Mat::new_size_with_data(Size::new(next.img.width() as i32, next.img.height() as i32), CV_8UC1, next.img.as_raw().as_ptr() as *mut std::ffi::c_void, 0) }?;
 
                 let mut of = Mat::default();
-                let mut optflow = <dyn opencv::video::DISOpticalFlow>::create(opencv::video::DISOpticalFlow_PRESET_FAST)?;
+                let mut optflow = opencv::video::DISOpticalFlow::create(opencv::video::DISOpticalFlow_PRESET_FAST)?;
                 optflow.calc(&a1_img, &a2_img, &mut of)?;
 
                 let mut points_a = Vec::new();
