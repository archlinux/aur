# Maintainer: AltoXorg <atrl101 AT yahoo DOT com>

_reponame=Shipwright
pkgbase=soh-git
pkgname=(soh-git soh-otr-exporter-git)
pkgver=6.0.0.r7.g7c3c662eb
pkgrel=1
arch=("x86_64" "i686")
url="https://shipofharkinian.com/"
_depends_soh=("sdl2" "sdl2_net" "libpulse" "glew")
_depends_soh_otr_exporter=("libpng")
depends=("${_depends_soh[@]}" "${_depends_soh_otr_exporter[@]}")
makedepends=("cmake" "ninja" "python" "curl" "lsb-release" "libxrandr" "libxinerama" "libxi" "glu")
source=("git+https://github.com/HarbourMasters/${_reponame}.git"
        "git+https://github.com/kenix3/libultraship.git"
        "soh.desktop"
        "soh-use-appbasedir.patch"
        "lus-install-paths.patch"
        "otrgui-wrapper.sh")
sha256sums=('SKIP'
            'SKIP'
            'd93dbc5273eb6ab88aa4d99869a6ba7fce495253a953af269c28ec72c0b00eb6'
            'a7116d348afda424e3bcabda4a5cd4d6473039494bfe8ef1d81909f86ff0b72d'
            '3de25d94d28f58daec33539181a8a666a20545204089996acf485325124ff9bc'
            '6e735877e7bba81f9f308f6eabbdfe5354f2c331a9acf9a16ab02a5681f2c25f')

# NOTE: If compiling complains about missing headers, set __generate_headers below to 1
# Changable options for debugging:
__debug=0             # Build with debug flag
__generate_headers=0  # Generate OTR (unnecessary) and asset headers. **requires rom**

if [ "$__debug" = 1 ]; then
  options=(debug strip)
fi

SHIP_PREFIX=/opt/soh

pkgver() {
  cd "${srcdir}/${_reponame}"

  git describe --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd "${srcdir}/${_reponame}"

  # Init libultraship submodule
  git submodule init
  git config submodule.libultraship.url "$srcdir/libultraship"
  git -c protocol.file.allow=always submodule update

  # Commit 66b2d2d5fae75ad4d4b2a5106bf70bf8321aa88c permamently adds pregenerated asset headers
  # so you don't need to activate this one unless told to do so
  if [ "$__generate_headers" = 1 ]; then
    # check for any roms in the directory where PKGBUILD resides
    # and copy them to Shipwright/OTRExporter. It doesn't matter
    # which rom we'll be using, let extract_assets.py do the guessing.
    roms=( "${startdir}/"*.*64 )
    if (( "${#roms[@]}" )); then
      cp "${roms[@]}" OTRExporter
    else
      echo "NO ROMS FOUND! Please place them in \"${startdir}\"."
      return 1
    fi
  else
    # Required asset headers generated by ZAPD/TR so we don't require a rom to create these files.
    # Only needed headers are present to compensate file size requirements.
    #tar -Jxf ../assets-headers-gc_nmq_pal_f.tar.xz
    true

    # NOTE: requires __generate_headers to be set as 1 and after building of this pkg.
    # This archive is generated by these commands:
    # $ cd src/Shipwright
    # $ cd OTRExporter
    # $ ./extract_assets.py -z ../build/ZAPD/ZAPD.out # Select your Europe Gamecube rom
    # $ cd ../soh
    # $ ../../../../create-asset-headers-archive.py ../../assets-headers-gc_nmq_pal_f.tar.xz
    #
    # Make sure to regenerate source checksums after recreating the archive
  fi

  patch -Np1 -i "${srcdir}/soh-use-appbasedir.patch"
  patch -Np1 -i "${srcdir}/lus-install-paths.patch"
}

build() {
  cd "${srcdir}/${_reponame}"

  if [ "$__debug" = 1 ]; then
    BUILD_TYPE=Debug
  else
    BUILD_TYPE=Release
  fi

  CFLAGS="${CFLAGS/-Werror=format-security/}" \
  CXXFLAGS="${CXXFLAGS/-Werror=format-security/}" \
    cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$SHIP_PREFIX .

  cmake --build build --target ZAPD --config $BUILD_TYPE
  [ "$__generate_headers" = 1 ] && cmake --build build --target ExtractAssets
  cmake --build build --target soh --config $BUILD_TYPE

  cmake --build build --target OTRGui --config $BUILD_TYPE
}

package_soh-git() {
  pkgdesc="A port of The Legend of Zelda Ocarina of Time for PC, Wii U, and Switch (git)"
  provides=("soh")
  conflicts=("soh")
  depends=("${_depends_soh[@]}")
  license=("unknown")
  install=soh.install
  optdepends=("soh-otr: OTR asset file in order to run"
              "soh-otr-mq: OTR asset file in order to run (Master Quest)")

  cd "${srcdir}/${_reponame}"

  DESTDIR="${pkgdir}" cmake --install build/soh

  install -dm755 "${pkgdir}/usr/bin/"
  ln -s /opt/soh/soh.elf "${pkgdir}/usr/bin/soh"
  install -Dm644 "${srcdir}/soh.desktop" -t "${pkgdir}/usr/share/applications"
  install -Dm644 soh/macosx/sohIcon.png "${pkgdir}/usr/share/pixmaps/soh.png"
}

package_soh-otr-exporter-git() {
  pkgdesc="OTR generation tools for SoH, including asset XML files and a simple GUI tool (git)"
  provides=("soh-otr-exporter")
  conflicts=("soh-otr-exporter")
  license=("MIT")
  depends=("${_depends_soh_otr_exporter[@]}")
  optdepends=("zenity: OTRGui file chooser"
              "kdialog: OTRGui file chooser (KDE)")

  cd "${srcdir}/${_reponame}"

  DESTDIR="${pkgdir}" cmake --install build/OTRGui

  install -dm755 "${pkgdir}/usr/bin/"
  install -Dm755 "${srcdir}/otrgui-wrapper.sh" "${pkgdir}/usr/bin/OTRGui"
  ln -s /opt/soh/assets/extractor/ZAPD.out "${pkgdir}/usr/bin/ZAPD"
}
