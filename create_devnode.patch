--- dev_one.orig/one.c	2023-01-10 16:06:30.739529861 +0100
+++ dev_one/one.c	2023-01-10 16:06:43.229529471 +0100
@@ -6,4 +6,7 @@
 #include <linux/uaccess.h>
 #include <linux/vmalloc.h>
+#include <linux/device.h>
+#include <linux/kdev_t.h>
+#include <linux/cdev.h>
 
 MODULE_LICENSE("GPL");
@@ -12,4 +15,10 @@
 static const char device_name[] = "one";
 
+static dev_t first; // Global variable for the first device number (major and minor)
+static const unsigned int first_minor = 1; // The first minor number we want to request (Needs to be between 1 ans 254)
+static const unsigned int device_count = 8; // The number of devices we want to support. Make sure that first_minor + device_count <= 254.
+static struct cdev c_dev; // Global variable for the character device structure
+static struct class *cl; // Global variable for the device class
+
 static ssize_t device_file_read(
         struct file *file_ptr,
@@ -41,11 +51,38 @@
     int res = 0;
     printk( KERN_NOTICE "One: register_device() is called.\n" );
-    res = register_chrdev( 0, device_name, &simple_driver_fops );
-    if( res < 0 ) {
+    res = alloc_chrdev_region(&first, first_minor, device_count, device_name);
+    if( res != 0 ) {
         printk( KERN_WARNING "One:  can\'t register character device with error code = %i\n", res );
         return res;
     }
-    device_file_major_number = res;
-    printk( KERN_NOTICE "One: registered character device with major number = %i and minor numbers 0...255\n", device_file_major_number );
+    device_file_major_number = MAJOR(first);
+    printk( KERN_NOTICE "One: registered character device with major number = %i and minor numbers %i..%i\n", device_file_major_number, first_minor, first_minor+device_count
+    );
+
+    // Create sysfs information:
+    if ((cl = class_create(THIS_MODULE, "chardrv")) == NULL) {
+        printk( KERN_ALERT "One: Device class creation failed\n" );
+        unregister_chrdev_region(first, 1);
+        return -1;
+    }
+    printk( KERN_NOTICE "One: Device class created." );
+    if (device_create(cl, NULL, first, NULL, "one") == NULL) {
+        printk( KERN_ALERT "One: Device creation failed\n" );
+        class_destroy(cl);
+        unregister_chrdev_region(first, 1);
+        return -1;
+    }
+    printk( KERN_NOTICE "One: Device created." );
+    cdev_init(&c_dev, &simple_driver_fops);
+    printk( KERN_NOTICE "One: Device initialised." );
+    if (cdev_add(&c_dev, first, 1) == -1) {
+        printk( KERN_ALERT "Onde: Device addition failed\n" );
+        device_destroy(cl, first);
+        class_destroy(cl);
+        unregister_chrdev_region(first, 1);
+        return -1;
+    }
+    printk( KERN_NOTICE "One: Device added." );
+
     return 0;
 }
@@ -53,6 +90,15 @@
 void unregister_device(void) {
     printk( KERN_NOTICE "One: unregister_device() is called\n" );
+
+    // Destroy sysfs information:
+    cdev_del(&c_dev);
+    printk( KERN_NOTICE "One: Device deleted." );
+    device_destroy(cl, first);
+    printk( KERN_NOTICE "One: Device destroyed." );
+    class_destroy(cl);
+    printk( KERN_NOTICE "One: Device class destroyed." );
+
     if(device_file_major_number != 0) {
-        unregister_chrdev(device_file_major_number, device_name);
+        unregister_chrdev_region(first, device_count);
     }
 }
